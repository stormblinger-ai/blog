import{_ as s,c as t,o as n,a5 as a}from"./chunks/framework.BthLuVtL.js";const b=JSON.parse('{"title":"Python 字符串","description":"","frontmatter":{},"headers":[],"relativePath":"Python/7.md","filePath":"Python/7.md"}'),p={name:"Python/7.md"},e=a(`<h1 id="python-字符串" tabindex="-1">Python 字符串 <a class="header-anchor" href="#python-字符串" aria-label="Permalink to &quot;Python 字符串&quot;">​</a></h1><p>更新：2022-08-07 23:12</p><h2 id="字符串输出" tabindex="-1">字符串输出 <a class="header-anchor" href="#字符串输出" aria-label="Permalink to &quot;字符串输出&quot;">​</a></h2><p>​ 在 Python 中，字符串是一种不可变的序列数据类型。它是包含在单引号、双引号或三引号内的 Unicode 字符序列。</p><p>​ 以下是 Python 中的有效字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;This is a string in Python&#39;</span></span>
<span class="line"><span>&quot;This is a string in Python&quot;</span></span>
<span class="line"><span>&#39;&#39;&#39;This is a string in Python&#39;&#39;&#39;</span></span>
<span class="line"><span>&quot;&quot;&quot;This is a string in Python&quot;&quot;&quot;</span></span></code></pre></div><p>​ 字符串可以赋给变量，如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&#39;This is a string in Python&#39; </span></span>
<span class="line"><span>print(str1)</span></span>
<span class="line"><span>str2=&quot;This is a string in Python&quot; </span></span>
<span class="line"><span>print(str2)</span></span></code></pre></div><p>​ 输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>This is a string in Python</span></span>
<span class="line"><span>This is a string in Python</span></span></code></pre></div><p>​ 多行字符串必须嵌入三重引号，如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&#39;&#39;&#39;多行(三重单引号)</span></span>
<span class="line"><span>字符串</span></span>
<span class="line"><span>Multi-line</span></span>
<span class="line"><span>string.</span></span>
<span class="line"><span>&#39;&#39;&#39;</span></span>
<span class="line"><span>print(str1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str2=&quot;&quot;&quot;多行(三重双引号)</span></span>
<span class="line"><span>字符串</span></span>
<span class="line"><span>Multi-line</span></span>
<span class="line"><span>string.&quot;&quot;&quot;</span></span>
<span class="line"><span>print(str2)</span></span></code></pre></div><p>​ 输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>多行(三重单引号)</span></span>
<span class="line"><span>字符串</span></span>
<span class="line"><span>Multi-line</span></span>
<span class="line"><span>string.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>多行(三重双引号)</span></span>
<span class="line"><span>字符串</span></span>
<span class="line"><span>Multi-line</span></span>
<span class="line"><span>string.</span></span></code></pre></div><p>​ 如果字符串中含有双引号，则输出字符串时，要用单引号包围进行输出。反之，如果字符串中含有单引号，则需要用双引号包围进行输出。</p><p>​ 如果同时使用单引号或者双引号，则需要将，字符串内部的引号进行转移。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&#39;学习python就来&quot;www.fke6.com&quot;&#39;</span></span>
<span class="line"><span>print(str1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str2=&quot;学习python就来&#39;www.fke6.com&#39;&quot;</span></span>
<span class="line"><span>print(str2)</span></span></code></pre></div><p>​ 输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Welcome to 学习python就来&quot;www.fke6.com&quot;</span></span>
<span class="line"><span>Welcome to 学习python就来&#39;www.fke6.com&#39;</span></span></code></pre></div><p>​</p><p>​ 下面来看下在同时使用单引号或者双引号时，如何输出字符串</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str3=&#39;学习python就来&#39;www.fke6.com&#39;&#39;</span></span>
<span class="line"><span>print(str3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#此时程序会报语法错误：</span></span>
<span class="line"><span>#SyntaxError: invalid syntax</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#正确写法:</span></span>
<span class="line"><span>str3=&#39;学习python就来\\&#39;www.fke6.com\\&#39;&#39;</span></span>
<span class="line"><span>str4=&quot;学习python就来\\&quot;www.fke6.com\\&quot;&quot;</span></span></code></pre></div><h2 id="字符串索引" tabindex="-1">字符串索引 <a class="header-anchor" href="#字符串索引" aria-label="Permalink to &quot;字符串索引&quot;">​</a></h2><p>​ 使用<code>len()</code>函数检索字符串的长度，如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; str1=&#39;nihao&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; len(str1)</span></span>
<span class="line"><span>5</span></span></code></pre></div><p>​ 序列被定义为有序的项目集合。因此，字符串是字符的有序集合。该序列使用一个索引，从零开始从其中获取某个项目(在字符串的情况下是一个字符)。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; str1=&#39;nihao&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[0]</span></span>
<span class="line"><span>&#39;n&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[1]</span></span>
<span class="line"><span>&#39;i&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[2]</span></span>
<span class="line"><span>&#39;h&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[3]</span></span>
<span class="line"><span>&#39;a&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[4]</span></span>
<span class="line"><span>&#39;o&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str1[5] # throw error if index &gt; len(string)-1</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>File &quot;&lt;pyshell#2&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span>str1[5]</span></span>
<span class="line"><span>IndexError: string index out of range</span></span></code></pre></div><p>​ Python 也支持负索引，从-(字符串长度)到-1。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; str2=&#39;hello&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str2[-5]</span></span>
<span class="line"><span>&#39;n&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str2[-4]</span></span>
<span class="line"><span>&#39;i&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str2[-3]</span></span>
<span class="line"><span>&#39;h&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str2[-2]</span></span>
<span class="line"><span>&#39;a&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str2[-1]</span></span>
<span class="line"><span>&#39;o&#39;</span></span></code></pre></div><p>​ 字符串是一个不可变的对象。因此，不可能对其进行直接修改。试图在某个索引处分配不同的字符会导致错误。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; str3=&#39;nihao&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str3[0]=&#39;A&#39;</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>File &quot;&lt;pyshell#2&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span>str3[0]=&#39;A&#39;</span></span>
<span class="line"><span>TypeError: &#39;str&#39; object does not support item assignment</span></span></code></pre></div><h2 id="字符串类" tabindex="-1">字符串类 <a class="header-anchor" href="#字符串类" aria-label="Permalink to &quot;字符串类&quot;">​</a></h2><p>​ 所有字符串都是 Python 中<code>str</code>类的对象。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; greet=&#39;hello&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; type(greet)</span></span>
<span class="line"><span>&lt;class &#39;str&#39;&gt;</span></span></code></pre></div><p>​ 使用<code>str()</code>功能将数字转换为字符串。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; str(100)</span></span>
<span class="line"><span>&#39;100&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str(-10)</span></span>
<span class="line"><span>&#39;-10&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; str(True)</span></span>
<span class="line"><span>&#39;True&#39;</span></span></code></pre></div><h2 id="转义序列" tabindex="-1">转义序列 <a class="header-anchor" href="#转义序列" aria-label="Permalink to &quot;转义序列&quot;">​</a></h2><p>​ 转义字符用于调用序列中后续字符的替代实现。在 Python 中，反斜杠<code>\\</code>用作转义字符。使用反斜杠字符，后跟要插入到字符串中的字符，例如<code>\\&#39;</code>在字符串中包含引号，或者<code>\\&quot;</code>在字符串中包含双引号，如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&#39;Welcome to \\&#39;Python Tutorial\\&#39; on TutorialsTeacher&#39;</span></span>
<span class="line"><span>print(str1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str2=&quot;Welcome to \\&quot;Python Tutorial\\&quot; on TutorialsTeacher&quot;</span></span>
<span class="line"><span>print(str2)</span></span></code></pre></div><p>​ Output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Welcome to &#39;Python Tutorial&#39; from TutorialsTeacher</span></span>
<span class="line"><span>Welcome to &quot;Python Tutorial&quot; on TutorialsTeacher</span></span></code></pre></div><p>​ 使用<code>r</code>或<code>R</code>忽略字符串中的转义序列。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=r&#39;Welcome to \\&#39;Python Tutorial\\&#39; on TutorialsTeacher&#39;</span></span>
<span class="line"><span>print(str1)</span></span></code></pre></div><p>​ Output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Welcome to \\&#39;Python Tutorial\\&#39; from TutorialsTeacher</span></span></code></pre></div><p>​ 下表列出了 Python 中的转义序列。</p><table><thead><tr><th>转义序列</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠</td><td>&gt;&gt;&gt; &quot;你好\\你好&quot; 你好\\你好</td></tr><tr><td>\\b</td><td>退格</td><td>&gt;&gt;&gt; &quot;ab\\bc&quot; 交流</td></tr><tr><td>\\F</td><td>换页</td><td></td></tr><tr><td>\\n</td><td>新队</td><td>&gt;&gt;&gt; &quot;hello\\nworld&quot; 你好 世界</td></tr><tr><td>\\nnn</td><td>八进制表示法，其中 n 在 0-7 范围内</td><td>&gt;&gt;&gt; &#39;\\101&#39; 一个</td></tr><tr><td>\\t</td><td>标签</td><td>&gt;&gt;&gt; &#39;Hello\\tPython&#39; 你好 Python</td></tr><tr><td>\\xnn</td><td>十六进制表示法，其中 n 在 0-9、af 或 AF 范围内</td><td>&gt;&gt;&gt; &#39;\\x48\\x69&#39; 你好</td></tr><tr><td>\\onn</td><td>八进制表示法，其中 n 在 0-9 范围内</td><td>&gt;&gt;&gt; &quot;\\110\\151&quot; 你好</td></tr></tbody></table><p>​ T2【你好】 T3】世界 | | \\nnn | 八进制记数法，其中 n 在 0-7 范围内 | &gt; &gt; &gt; &#39; \\101&#39; A | | \\t | 标签 | &gt; &gt; &gt; &#39; Hello \\ tPython &#39; Hello Python | | \\xnn | 十六进制表示法，其中 n 在 0-9、a-f 或 A-F 的范围内 | &gt; &gt; &gt; &#39; \\x48\\x69&#39; 嗨 | | \\ n | 八进制记数法，其中 n 在 0-9 范围内 | &gt; &gt; &gt; &quot; \\110\\151&quot; 嗨 |</p><h2 id="字符串运算符" tabindex="-1">字符串运算符 <a class="header-anchor" href="#字符串运算符" aria-label="Permalink to &quot;字符串运算符&quot;">​</a></h2><p>​ 显然，算术运算符不对字符串进行操作。但是，字符串处理有特殊的运算符。</p><table><thead><tr><th>操作员</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>将第二个字符串追加到第一个字符串之后</td><td>&gt; &gt; &gt; a= &#39;你好&#39;</td></tr></tbody></table><h2 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>str .大写()T2】</td><td>返回字符串的副本，其第一个字符大写，其余字母小写。</td></tr><tr><td>弦折()T2】</td><td>返回一个小写字符串。它类似于 lower()方法，但 casefold()方法将更多字符转换为小写。</td></tr><tr><td>弦.中()T2】</td><td>返回一个新的指定长度的居中字符串，该字符串用指定的字符填充。最可怕的特征是空间。</td></tr><tr><td>弦长()T2】</td><td>搜索(区分大小写)给定字符串中的指定子字符串，并返回一个指示该子字符串出现的整数。</td></tr><tr><td>string . endcom()</td><td>如果字符串以指定的后缀(区分大小写)结尾，则返回真，否则返回假。</td></tr><tr><td>T2</td><td>根据前面的字符数和指定的制表符大小，返回一个字符串，所有制表符\\t 都用一个或多个空格替换。</td></tr><tr><td>string.find()</td><td>返回给定字符串中第一个出现的子字符串的索引(区分大小写)。如果没有找到子字符串，它将返回-1。</td></tr><tr><td>string . index()T2】</td><td>返回给定字符串中第一个出现的子字符串的索引。</td></tr><tr><td>string . is lnum()</td><td>如果字符串中的所有字符都是字母数字(字母或数字)，则返回 True。如果不是，则返回假。</td></tr><tr><td>string.isalpha()</td><td>如果字符串中的所有字符都是字母(小写和大写)，则返回 True 如果至少有一个字符不是字母，则返回 False。</td></tr><tr><td>【string . isascii()</td><td>如果字符串为空或字符串中的所有字符都是 ASCII 字符，则返回 True。</td></tr><tr><td>string . is descimal()T2】</td><td>如果字符串中的所有字符都是十进制字符，则返回 True。如果不是，则返回假。</td></tr><tr><td>string . isdigt()</td><td>如果字符串中的所有字符都是数字或数字的 Unicode 字符，则返回 True。如果不是，则返回假。</td></tr><tr><td>string . isi identifier()</td><td>检查字符串是否是有效的标识符字符串。如果字符串是有效的标识符，则返回真，否则返回假。</td></tr><tr><td>string . ispower()</td><td>检查给定字符串的所有字符是否都是小写的。如果所有字符都是小写，则返回真；如果一个字符是大写，则返回假。</td></tr><tr><td>string . is numeric()T2】</td><td>检查字符串中的所有字符是否都是数字字符。如果所有字符都是数字，它将返回真，即使一个字符是非数字，它也将返回假。</td></tr><tr><td>string . is printable()T2】</td><td>如果给定字符串的所有字符都是可打印的，则返回 True。即使有一个字符不可打印，它也会返回 False。</td></tr><tr><td>string . isspace()T2】</td><td>如果给定字符串的所有字符都是空格，则返回 True。即使一个字符不是空白，它也会返回 False。</td></tr><tr><td>string . isttle()</td><td>检查每个单词的第一个字符是否大写，其余字符是否小写。如果字符串有标题，则返回真；否则，它返回 False。符号和数字被忽略。</td></tr><tr><td>string.isupper()</td><td>如果所有字符都是大写，则返回真；如果一个字符不是大写，则返回假。</td></tr><tr><td>string . join()T2】</td><td>返回一个字符串，它是字符串(在其上调用它)与指定 iterable 的字符串元素作为参数的串联。</td></tr><tr><td>字符串.光()T2</td><td>返回指定宽度的左对齐字符串。如果指定的宽度大于字符串长度，则字符串的剩余部分用指定的 fillchar 填充。</td></tr><tr><td>弦长()T2】</td><td>返回原始字符串的副本，其中所有字符都转换为小写。</td></tr><tr><td>string . lsrip()</td><td>通过删除指定为参数的前导字符返回字符串的副本。</td></tr><tr><td>string.maketrans()</td><td>返回一个映射表，该表将给定字符串中的每个字符映射到同一位置的第二个字符串中的字符。此映射表与 translate()方法一起使用，该方法将根据映射表替换字符。</td></tr><tr><td>弦.分区()T2】</td><td>在第一次出现指定的字符串分隔符 sep 参数时拆分字符串，并返回包含三个元素的元组，即分隔符之前的部分、分隔符本身和分隔符之后的部分。</td></tr><tr><td>string . replace()T2】</td><td>返回字符串的副本，其中一个子字符串的所有匹配项都被另一个子字符串替换。</td></tr><tr><td>string . rfnd()</td><td>返回给定字符串中指定子字符串的最高索引(子字符串的最后一次出现)。</td></tr><tr><td>string . rinex()</td><td>返回给定字符串中最后一次出现的子字符串的索引。</td></tr><tr><td>string . rust()</td><td>返回指定宽度的右对齐字符串。如果指定的宽度大于字符串长度，则字符串的剩余部分用指定的填充字符填充。</td></tr><tr><td>string . rpartition()T2】</td><td>在指定字符串分隔符 sep 参数的最后一次出现处拆分字符串，并返回包含三个元素的元组，即分隔符之前的部分、分隔符本身和分隔符之后的部分。</td></tr><tr><td>string . rslit()</td><td>从指定的分隔符拆分字符串，并返回包含字符串元素的列表对象。</td></tr><tr><td>string . rstrip()T2】</td><td>通过删除指定为参数的尾随字符，返回字符串的副本。</td></tr><tr><td>string . split()T2】</td><td>从指定的分隔符拆分字符串，并返回包含字符串元素的列表对象。</td></tr><tr><td>string . splitlines()T2】</td><td>在行边界处拆分字符串，并返回字符串中的行列表。</td></tr><tr><td>string.startswith()</td><td>如果字符串以指定的前缀开头，则返回 True。如果不是，则返回假。</td></tr><tr><td>string . strip()T2】</td><td>通过删除前导和尾随字符返回字符串的副本。</td></tr><tr><td>string.swapcase()</td><td>返回字符串的副本，大写字符转换为小写字符，反之亦然。符号和字母被忽略。</td></tr><tr><td>string.title()</td><td>返回一个字符串，其中每个单词以大写字符开头，其余字符为小写字符。</td></tr><tr><td>string.translate()</td><td>返回一个字符串，其中每个字符都映射到翻译表中相应的字符。</td></tr><tr><td>弦上()T2】</td><td>返回大写的字符串。符号和数字不受影响。</td></tr><tr><td>张弦()T2】</td><td>返回左侧填充有“0”字符的字符串副本。它在字符串的开头添加零(0)，直到字符串的长度等于指定的宽度参数。</td></tr></tbody></table>`,53),i=[e];function l(d,r,o,c,g,h){return n(),t("div",null,i)}const v=s(p,[["render",l]]);export{b as __pageData,v as default};
