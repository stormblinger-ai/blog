import{_ as a,c as t,o as n,a5 as o,m as e}from"./chunks/framework.BthLuVtL.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python-db/MongoDB.md","filePath":"Python-db/MongoDB.md"}'),l={name:"Python-db/MongoDB.md"},d=o('<p>MongoDB 是一款面向文档型的 <code>NoSQL</code> 数据库，是一个基于分布式文件存储的开源的非关系型数据库系统，其内容是以 <code>K/V</code> 形式存储，结构不固定，它的字段值可以包含其他文档、数组和文档数组等。其采用的 <code>BSON</code>（二进制 JSON ）的数据结构，可以提高存储和扫描效率，但空间开销会有些大。今天就为大家简单介绍下在 Python 中使用 MongoDB 。</p><h2 id="安装-pymongo-库" tabindex="-1">安装 PyMongo 库 <a class="header-anchor" href="#安装-pymongo-库" aria-label="Permalink to &quot;安装 PyMongo 库&quot;">​</a></h2><p>在 Python 中操作 MongoDB ，需要使用 <code>PyMongo</code> 库，执行如下命令安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip3 install pymongo</span></span></code></pre></div><h2 id="连接-mongodb-数据库" tabindex="-1">连接 MongoDB 数据库 <a class="header-anchor" href="#连接-mongodb-数据库" aria-label="Permalink to &quot;连接 MongoDB 数据库&quot;">​</a></h2><p>连接时需要使用 PyMongo 库里面的 MongoClient 模块，有两种方式可以创建连接，默认只需要传入IP和端口号即可。如果数据库存在账号密码，则需要指定连接的数据库，并进行鉴权才能连接成功。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#导入 MongoClient 模块</span></span></code></pre></div><h2 id="mongodb-数据库操作" tabindex="-1">MongoDB 数据库操作 <a class="header-anchor" href="#mongodb-数据库操作" aria-label="Permalink to &quot;MongoDB 数据库操作&quot;">​</a></h2><p>成功连接数据库，接下来我们开始介绍通过 MongoClient 模块如何对 mongoDB 数据库进行 <code>CURD</code> 的操作。</p><h3 id="获取数据库和集合" tabindex="-1">获取数据库和集合 <a class="header-anchor" href="#获取数据库和集合" aria-label="Permalink to &quot;获取数据库和集合&quot;">​</a></h3><p>首先要指定需要操作的数据库和集合，这里的数据库可以对应为 <code>Mysql</code> 的 <code>DataBase</code>，集合对应为 <code>Mysql</code> 的 <code>Table</code>。需要注意的是在 mongoDB 中，不需要提前创建数据库和集合，在你操作它们时如果没有则会自动创建，但都是延时创建的，在添加 <code>Document</code> 时才会真正创建。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 指定操作数据库的两种方式</span></span></code></pre></div><h3 id="数据的插入操作" tabindex="-1">数据的插入操作 <a class="header-anchor" href="#数据的插入操作" aria-label="Permalink to &quot;数据的插入操作&quot;">​</a></h3><p>在 MongoDB 中，每条数据其实都有一个 <code>_id</code> 属性作为唯一标识。如果没有显式指明该属性，MongoDB 会自动产生一个 <code>ObjectId</code> 类型的 <code>_id</code> 属性，<code>insert()</code> 方法会在执行后返回 <code>_id</code> 值。不过在 PyMongo 3.x 版本中，官方已经不推荐使用 <code>insert()</code> 方法，而是推荐使用<code>insert_one()</code> 和 <code>insert_many()</code> 方法来分别插入单条记录和多条记录。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 要插入到集合中的对象</span></span></code></pre></div><h3 id="数据的查询操作" tabindex="-1">数据的查询操作 <a class="header-anchor" href="#数据的查询操作" aria-label="Permalink to &quot;数据的查询操作&quot;">​</a></h3><p>查询需要使用 <code>find_one()</code> 或 <code>find()</code> 方法，其中 <code>find_one()</code> 查询得到的是单个结果，即一条记录，<code>find()</code> 则返回一个生成器对象。下面我们就来查询上面刚插入的数据，如果查询不到数据则返回 <code>None</code> ，代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 通过条件查询一条记录，如果不存在则返回None</span></span></code></pre></div><p>上面查询条件中我们用到了 <code>$gt</code> 的比较运算符，关于查询条件中的比较运算符和功能运算符对照表如下：</p>',19),s=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"符号"),e("th",null,"含义"),e("th",null,"举例")])]),e("tbody",null,[e("tr",{"$gt:":"",50:""},[e("td",null,"$gt"),e("td",null,"大于"),e("td",null,"{'page':")]),e("tr",null,[e("td",null,"$lt"),e("td",null,"小于"),e("td")]),e("tr",null,[e("td"),e("td"),e("td")]),e("tr",null,[e("td",null,"$lte"),e("td",null,"小于等于"),e("td")]),e("tr",null,[e("td"),e("td"),e("td")]),e("tr",null,[e("td",null,"$gte"),e("td",null,"大于等于"),e("td")]),e("tr",null,[e("td"),e("td"),e("td")]),e("tr",null,[e("td",null,"$ne"),e("td",null,"不等于"),e("td")]),e("tr",null,[e("td"),e("td"),e("td")]),e("tr",null,[e("td",null,"$in"),e("td",null,"在范围内"),e("td",null,"{'page': {'$in': [50, 100]}}")]),e("tr",null,[e("td",null,"$nin"),e("td",null,"不在范围内"),e("td",null,"{'page': {'$nin': [50, 100]}}")]),e("tr",null,[e("td",null,"$regex"),e("td",null,"匹配正则表达式"),e("td",null,"{'name': {'$regex': '^张.*'}}")]),e("tr",null,[e("td",null,"$exists"),e("td",null,"属性是否存在"),e("td",null,"{'name': {'$exists': True}}")]),e("tr",null,[e("td",null,"$type"),e("td",null,"类型判断"),e("td",null,"{'name': {'$type': 'string'}}")]),e("tr",null,[e("td",null,"$mod"),e("td",null,"数字模操作"),e("td",null,"{'page': {'$mod': [80, 10]}}")]),e("tr",null,[e("td",null,"$text"),e("td",null,"文本查询"),e("td",null,"{'$text': {'$search': 'Java'}}")]),e("tr",null,[e("td",null,"$where"),e("td",null,"高级条件查询"),e("td",null,"{'$where': 'obj. author == obj. full_name'}")])])],-1),c=o('<h3 id="数据的更新操作" tabindex="-1">数据的更新操作 <a class="header-anchor" href="#数据的更新操作" aria-label="Permalink to &quot;数据的更新操作&quot;">​</a></h3><p>更新操作和插入操作类似，<code>PyMongo</code> 提供了两种更新方法，即 <code>update_one()</code> 和 <code>update_many()</code> 方法，其中 <code>update_one()</code> 方法只会更新满足条件的第一条记录。</p><blockquote><p>注意：</p><ul><li><p>如果使用 $set，则只更新 book 对象内存在的字段，如果更新前还有其他字段，则不更新也不删除。</p></li><li><p>如果不使用 $set，则会把更新前的数据全部用 book 对象替换，如果原本存在其他字段则会被删除。</p></li></ul></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 查询一条记录</span></span></code></pre></div><h3 id="集合的删除操作" tabindex="-1">集合的删除操作 <a class="header-anchor" href="#集合的删除操作" aria-label="Permalink to &quot;集合的删除操作&quot;">​</a></h3><p>删除数据同样推荐使用两个方法 <code>delete_one()</code> 和 <code>delete_many()</code> ，其中 <code>delete_one()</code> 为删除第一条符合条件的记录。具体操作代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 删除满足条件的第一条记录</span></span></code></pre></div><h3 id="其他数据库操作" tabindex="-1">其他数据库操作 <a class="header-anchor" href="#其他数据库操作" aria-label="Permalink to &quot;其他数据库操作&quot;">​</a></h3><p>除了以上标准的数据库操作外，<code>PyMongo</code> 还提供了以下通用且方便的操作方法，比如 <code>limit()</code> 方法用来读取指定数量的数据<code>skip()</code> 方法用来跳过指定数量的数据等，具体请看如下代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 查询返回满足条件的记录然后删除</span></span></code></pre></div><blockquote><p>注意：在数据量在在千万、亿级别庞大的时候，查询时最好 <code>skip()</code> 的值不要太大，这样很可能导致内存溢出。</p></blockquote><h3 id="数据索引操作" tabindex="-1">数据索引操作 <a class="header-anchor" href="#数据索引操作" aria-label="Permalink to &quot;数据索引操作&quot;">​</a></h3><p>默认情况下，数据插入时已经有一个 <code>_id</code> 索引了，当然我们还可以创建自定义索引。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># unique=True时，创建一个唯一索引，索引字段插入相同值时会自动报错，默认为False</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文为大家介绍了 Python 中如何创建连接 MongoDB 数据库，并通过代码的方式展示了对 MongoDB 数据的增删改查以及排序索引等操作，通过以上学习个人感觉操作起来还是比较简单方便的。今天就先介绍到这里，以后还会为大家介绍其他数据库的操作。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>PyMongo 文档：<a href="https://pymongo.readthedocs.io/en/stable/" target="_blank" rel="noreferrer">https://pymongo.readthedocs.io/en/stable/</a></p><blockquote><p>示例代码：<a href="https://github.com/JustDoPython/python-100-day" target="_blank" rel="noreferrer">https://github.com/JustDoPython/python-100-day</a></p></blockquote>',19),i=[d,s,c];function p(h,r,u,g,b,m){return n(),t("div",null,i)}const y=a(l,[["render",p]]);export{k as __pageData,y as default};
