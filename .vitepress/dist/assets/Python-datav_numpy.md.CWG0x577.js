import{_ as a,c as n,o as s,a5 as p}from"./chunks/framework.BthLuVtL.js";const e="/assets/numpy-logo-300.By8Ujl1x.png",t="/assets/ndarray.9dyljSag.png",i="/assets/image0020619.UfdqS749.gif",l="/assets/144030233.C-OQXdxl.png",k=JSON.parse('{"title":"NumPy 教程","description":"","frontmatter":{},"headers":[],"relativePath":"Python-datav/numpy.md","filePath":"Python-datav/numpy.md"}'),r={name:"Python-datav/numpy.md"},o=p('<h1 id="numpy-教程" tabindex="-1">NumPy 教程 <a class="header-anchor" href="#numpy-教程" aria-label="Permalink to &quot;NumPy 教程&quot;">​</a></h1><p><img src="'+e+`" alt="img"></p><p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p><p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><ul><li>一个强大的N维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C/C++/Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><hr><h2 id="numpy-应用" tabindex="-1">NumPy 应用 <a class="header-anchor" href="#numpy-应用" aria-label="Permalink to &quot;NumPy 应用&quot;">​</a></h2><p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p><p>SciPy 是一个开源的 Python 算法库和数学工具包。</p><p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p><p>Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p><hr><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li>NumPy 官网 <a href="http://www.numpy.org/" target="_blank" rel="noreferrer">http://www.numpy.org/</a></li><li>NumPy 源代码：<a href="https://github.com/numpy/numpy" target="_blank" rel="noreferrer">https://github.com/numpy/numpy</a></li><li>SciPy 官网：<a href="https://www.scipy.org/" target="_blank" rel="noreferrer">https://www.scipy.org/</a></li><li>SciPy 源代码：<a href="https://github.com/scipy/scipy" target="_blank" rel="noreferrer">https://github.com/scipy/scipy</a></li><li>Matplotlib 教程：<a href="https://www.runoob.com/matplotlib/matplotlib-tutorial.html" target="_blank" rel="noreferrer">Matplotlib 教程</a></li><li>Matplotlib 官网：<a href="https://matplotlib.org/" target="_blank" rel="noreferrer">https://matplotlib.org/</a></li><li>Matplotlib 源代码：<a href="https://github.com/matplotlib/matplotlib" target="_blank" rel="noreferrer">https://github.com/matplotlib/matplotlib</a></li></ul><h1 id="numpy-安装" tabindex="-1">NumPy 安装 <a class="header-anchor" href="#numpy-安装" aria-label="Permalink to &quot;NumPy 安装&quot;">​</a></h1><p>Python 官网上的发行版是不包含 NumPy 模块的。</p><p>我们可以使用以下几种方法来安装。</p><h2 id="_1、使用已有的发行版本" tabindex="-1">1、使用已有的发行版本 <a class="header-anchor" href="#_1、使用已有的发行版本" aria-label="Permalink to &quot;1、使用已有的发行版本&quot;">​</a></h2><p>对于许多用户，尤其是在 Windows 上，最简单的方法是下载以下的 Python 发行版，它们包含了所有的关键包（包括 NumPy，SciPy，matplotlib，IPython，SymPy 以及 Python 核心自带的其它包）：</p><ul><li><a href="https://www.anaconda.com/download/" target="_blank" rel="noreferrer">Anaconda</a>: 免费 Python 发行版，用于进行大规模数据处理、预测分析，和科学计算，致力于简化包的管理和部署。支持 Linux, Windows 和 Mac 系统。</li><li><a href="https://www.enthought.com/products/canopy" target="_blank" rel="noreferrer">Enthought Canopy</a>: 提供了免费和商业发行版。持 Linux, Windows 和 Mac 系统。</li><li><a href="https://python-xy.github.io/" target="_blank" rel="noreferrer">Python(x,y)</a>: 免费的 Python 发行版，包含了完整的 Python 语言开发包 及 <a href="https://www.spyder-ide.org/" target="_blank" rel="noreferrer">Spyder IDE</a>。支持 Windows，仅限 Python 2 版本。</li><li><a href="https://winpython.github.io" target="_blank" rel="noreferrer">WinPython</a>: 另一个免费的 Python 发行版，包含科学计算包与 Spyder IDE。支持 Windows。</li><li><a href="http://www.pyzo.org/" target="_blank" rel="noreferrer">Pyzo</a>: 基于 Anaconda 的免费发行版本及 IEP 的交互开发环境，超轻量级。 支持 Linux, Windows 和 Mac 系统。</li></ul><hr><h2 id="_2、使用-pip-安装" tabindex="-1">2、使用 pip 安装 <a class="header-anchor" href="#_2、使用-pip-安装" aria-label="Permalink to &quot;2、使用 pip 安装&quot;">​</a></h2><p>安装 NumPy 最简单的方法就是使用 <a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html" target="_blank" rel="noreferrer">pip 工具</a>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip3 install --user numpy scipy matplotlib</span></span></code></pre></div><p>--user 选项可以设置只安装在当前的用户下，而不是写入到系统目录。</p><p>默认情况使用国外线路，国外太慢，我们使用清华的镜像就可以:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip3 install numpy scipy matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre></div><hr><h2 id="linux-下安装" tabindex="-1">Linux 下安装 <a class="header-anchor" href="#linux-下安装" aria-label="Permalink to &quot;Linux 下安装&quot;">​</a></h2><p><strong>Ubuntu &amp; Debian</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo apt-get install python3-numpy python3-scipy python3-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose</span></span></code></pre></div><p><strong>CentOS/Fedora</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo dnf install numpy scipy python-matplotlib ipython python-pandas sympy python-nose atlas-devel</span></span></code></pre></div><p><strong>Mac 系统</strong></p><p>Mac 系统的 Homebrew 不包含 NumPy 或其他一些科学计算包，所以可以使用以下方式来安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip3 install numpy scipy matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre></div><hr><h2 id="安装验证" tabindex="-1">安装验证 <a class="header-anchor" href="#安装验证" aria-label="Permalink to &quot;安装验证&quot;">​</a></h2><p>测试是否安装成功：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; from numpy import *</span></span>
<span class="line"><span>&gt;&gt;&gt; eye(4)</span></span>
<span class="line"><span>array([[1., 0., 0., 0.],</span></span>
<span class="line"><span>       [0., 1., 0., 0.],</span></span>
<span class="line"><span>       [0., 0., 1., 0.],</span></span>
<span class="line"><span>       [0., 0., 0., 1.]])</span></span></code></pre></div><p><strong>from numpy import *</strong> 为导入 numpy 库。</p><p><strong>eye(4)</strong> 生成对角矩阵。</p><h1 id="numpy-ndarray-对象" tabindex="-1">NumPy Ndarray 对象 <a class="header-anchor" href="#numpy-ndarray-对象" aria-label="Permalink to &quot;NumPy Ndarray 对象&quot;">​</a></h1><p>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>ndarray 对象是用于存放同类型元素的多维数组。</p><p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>ndarray 内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要&quot;跨过&quot;的字节数。</li></ul><p>ndarray 的内部结构:</p><p><img src="`+t+`" alt="img"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 obj[::-1] 或 obj[:,::-1] 就是如此。</p><p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</span></span></code></pre></div><p><strong>参数说明：</strong></p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">数组或嵌套的数列</td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">数组元素的数据类型，可选</td></tr><tr><td style="text-align:left;">copy</td><td style="text-align:left;">对象是否需要复制，可选</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td style="text-align:left;">subok</td><td style="text-align:left;">默认返回一个与基类类型一致的数组</td></tr><tr><td style="text-align:left;">ndmin</td><td style="text-align:left;">指定生成数组的最小维度</td></tr></tbody></table><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p>接下来可以通过以下实例帮助我们更好的理解。</p><h2 id="实例-1" tabindex="-1">实例 1 <a class="header-anchor" href="#实例-1" aria-label="Permalink to &quot;实例 1&quot;">​</a></h2><p>import numpy as np a = np.array([1,2,3]) print (a)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1 2 3]</span></span></code></pre></div><h2 id="实例-2" tabindex="-1">实例 2 <a class="header-anchor" href="#实例-2" aria-label="Permalink to &quot;实例 2&quot;">​</a></h2><p># 多于一个维度 import numpy as np a = np.array([[1, 2], [3, 4]]) print (a)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1  2] </span></span>
<span class="line"><span> [3  4]]</span></span></code></pre></div><h2 id="实例-3" tabindex="-1">实例 3 <a class="header-anchor" href="#实例-3" aria-label="Permalink to &quot;实例 3&quot;">​</a></h2><p># 最小维度 import numpy as np a = np.array([1, 2, 3, 4, 5], ndmin = 2) print (a)</p><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1 2 3 4 5]]</span></span></code></pre></div><h2 id="实例-4" tabindex="-1">实例 4 <a class="header-anchor" href="#实例-4" aria-label="Permalink to &quot;实例 4&quot;">​</a></h2><p># dtype 参数 import numpy as np a = np.array([1, 2, 3], dtype = complex) print (a)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1.+0.j 2.+0.j 3.+0.j]</span></span></code></pre></div><p>ndarray 对象由计算机内存的连续一维部分组成，并结合索引模式，将每个元素映射到内存块中的一个位置。内存块以行顺序(C样式)或列顺序(FORTRAN或MatLab风格，即前述的F样式)来保存元素。</p><h1 id="numpy-数据类型" tabindex="-1">NumPy 数据类型 <a class="header-anchor" href="#numpy-数据类型" aria-label="Permalink to &quot;NumPy 数据类型&quot;">​</a></h1><p>numpy 支持的数据类型比 Python 内置的类型要多很多，基本上可以和 C 语言的数据类型对应上，其中部分类型对应为 Python 内置的类型。下表列举了常用 NumPy 基本类型。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>bool_</td><td>布尔型数据类型（True 或者 False）</td></tr><tr><td>int_</td><td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td>intc</td><td>与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td>intp</td><td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td>int8</td><td>字节（-128 to 127）</td></tr><tr><td>int16</td><td>整数（-32768 to 32767）</td></tr><tr><td>int32</td><td>整数（-2147483648 to 2147483647）</td></tr><tr><td>int64</td><td>整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td>uint8</td><td>无符号整数（0 to 255）</td></tr><tr><td>uint16</td><td>无符号整数（0 to 65535）</td></tr><tr><td>uint32</td><td>无符号整数（0 to 4294967295）</td></tr><tr><td>uint64</td><td>无符号整数（0 to 18446744073709551615）</td></tr><tr><td>float_</td><td>float64 类型的简写</td></tr><tr><td>float16</td><td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td>float32</td><td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td>float64</td><td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td>complex_</td><td>complex128 类型的简写，即 128 位复数</td></tr><tr><td>complex64</td><td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td>complex128</td><td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><p>numpy 的数值类型实际上是 dtype 对象的实例，并对应唯一的字符，包括 np.bool_，np.int32，np.float32，等等。</p><hr><h2 id="数据类型对象-dtype" tabindex="-1">数据类型对象 (dtype) <a class="header-anchor" href="#数据类型对象-dtype" aria-label="Permalink to &quot;数据类型对象 (dtype)&quot;">​</a></h2><p>数据类型对象（numpy.dtype 类的实例）用来描述与数组对应的内存区域是如何使用，它描述了数据的以下几个方面：：</p><ul><li>数据的类型（整数，浮点数或者 Python 对象）</li><li>数据的大小（例如， 整数使用多少个字节存储）</li><li>数据的字节顺序（小端法或大端法）</li><li>在结构化类型的情况下，字段的名称、每个字段的数据类型和每个字段所取的内存块的部分</li><li>如果数据类型是子数组，那么它的形状和数据类型是什么。</li></ul><p>字节顺序是通过对数据类型预先设定 &lt; 或 &gt; 来决定的。 &lt; 意味着小端法(最小值存储在最小的地址，即低位组放在最前面)。&gt; 意味着大端法(最重要的字节存储在最小的地址，即高位组放在最前面)。</p><p>dtype 对象是使用以下语法构造的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.dtype(object, align, copy)</span></span></code></pre></div><ul><li>object - 要转换为的数据类型对象</li><li>align - 如果为 true，填充字段使其类似 C 的结构体。</li><li>copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用</li></ul><h3 id="实例-5" tabindex="-1">实例 <a class="header-anchor" href="#实例-5" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p>接下来我们可以通过实例来理解。</p><h2 id="实例-1-1" tabindex="-1">实例 1 <a class="header-anchor" href="#实例-1-1" aria-label="Permalink to &quot;实例 1&quot;">​</a></h2><p>import numpy as np # 使用标量类型 dt = np.dtype(np.int32) print(dt)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int32</span></span></code></pre></div><h2 id="实例-2-1" tabindex="-1">实例 2 <a class="header-anchor" href="#实例-2-1" aria-label="Permalink to &quot;实例 2&quot;">​</a></h2><p>import numpy as np # int8, int16, int32, int64 四种数据类型可以使用字符串 &#39;i1&#39;, &#39;i2&#39;,&#39;i4&#39;,&#39;i8&#39; 代替 dt = np.dtype(&#39;i4&#39;) print(dt)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int32</span></span></code></pre></div><h2 id="实例-3-1" tabindex="-1">实例 3 <a class="header-anchor" href="#实例-3-1" aria-label="Permalink to &quot;实例 3&quot;">​</a></h2><p>import numpy as np # 字节顺序标注 dt = np.dtype(&#39;&lt;i4&#39;) print(dt)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int32</span></span></code></pre></div><p>下面实例展示结构化数据类型的使用，类型字段和对应的实际类型将被创建。</p><h2 id="实例-4-1" tabindex="-1">实例 4 <a class="header-anchor" href="#实例-4-1" aria-label="Permalink to &quot;实例 4&quot;">​</a></h2><p># 首先创建结构化数据类型 import numpy as np dt = np.dtype([(&#39;age&#39;,np.int8)]) print(dt)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[(&#39;age&#39;, &#39;i1&#39;)]</span></span></code></pre></div><h2 id="实例-5-1" tabindex="-1">实例 5 <a class="header-anchor" href="#实例-5-1" aria-label="Permalink to &quot;实例 5&quot;">​</a></h2><p># 将数据类型应用于 ndarray 对象 import numpy as np dt = np.dtype([(&#39;age&#39;,np.int8)]) a = np.array([(10,),(20,),(30,)], dtype = dt) print(a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[(10,) (20,) (30,)]</span></span></code></pre></div><h2 id="实例-6" tabindex="-1">实例 6 <a class="header-anchor" href="#实例-6" aria-label="Permalink to &quot;实例 6&quot;">​</a></h2><p># 类型字段名可以用于存取实际的 age 列 import numpy as np dt = np.dtype([(&#39;age&#39;,np.int8)]) a = np.array([(10,),(20,),(30,)], dtype = dt) print(a[&#39;age&#39;])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[10 20 30]</span></span></code></pre></div><p>下面的示例定义一个结构化数据类型 student，包含字符串字段 name，整数字段 age，及浮点字段 marks，并将这个 dtype 应用到 ndarray 对象。</p><h2 id="实例-7" tabindex="-1">实例 7 <a class="header-anchor" href="#实例-7" aria-label="Permalink to &quot;实例 7&quot;">​</a></h2><p>import numpy as np student = np.dtype([(&#39;name&#39;,&#39;S20&#39;), (&#39;age&#39;, &#39;i1&#39;), (&#39;marks&#39;, &#39;f4&#39;)]) print(student)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[(&#39;name&#39;, &#39;S20&#39;), (&#39;age&#39;, &#39;i1&#39;), (&#39;marks&#39;, &#39;f4&#39;)]</span></span></code></pre></div><h2 id="实例-8" tabindex="-1">实例 8 <a class="header-anchor" href="#实例-8" aria-label="Permalink to &quot;实例 8&quot;">​</a></h2><p>import numpy as np student = np.dtype([(&#39;name&#39;,&#39;S20&#39;), (&#39;age&#39;, &#39;i1&#39;), (&#39;marks&#39;, &#39;f4&#39;)]) a = np.array([(&#39;abc&#39;, 21, 50),(&#39;xyz&#39;, 18, 75)], dtype = student) print(a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[(&#39;abc&#39;, 21, 50.0), (&#39;xyz&#39;, 18, 75.0)]</span></span></code></pre></div><p>每个内建类型都有一个唯一定义它的字符代码，如下：</p><table><thead><tr><th>字符</th><th>对应类型</th></tr></thead><tbody><tr><td>b</td><td>布尔型</td></tr><tr><td>i</td><td>(有符号) 整型</td></tr><tr><td>u</td><td>无符号整型 integer</td></tr><tr><td>f</td><td>浮点型</td></tr><tr><td>c</td><td>复数浮点型</td></tr><tr><td>m</td><td>timedelta（时间间隔）</td></tr><tr><td>M</td><td>datetime（日期时间）</td></tr><tr><td>O</td><td>(Python) 对象</td></tr><tr><td>S, a</td><td>(byte-)字符串</td></tr><tr><td>U</td><td>Unicode</td></tr><tr><td>V</td><td>原始数据 (void)</td></tr></tbody></table><h1 id="numpy-数组属性" tabindex="-1">NumPy 数组属性 <a class="header-anchor" href="#numpy-数组属性" aria-label="Permalink to &quot;NumPy 数组属性&quot;">​</a></h1><p>本章节我们将来了解 NumPy 数组的一些基本属性。</p><p>NumPy 数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2，以此类推。</p><p>在 NumPy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 NumPy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。</p><p>很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。</p><p>NumPy 的数组中比较重要 ndarray 对象属性有：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndarray.ndim</td><td>秩，即轴的数量或维度的数量</td></tr><tr><td>ndarray.shape</td><td>数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td>ndarray.size</td><td>数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td>ndarray.dtype</td><td>ndarray 对象的元素类型</td></tr><tr><td>ndarray.itemsize</td><td>ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td>ndarray.flags</td><td>ndarray 对象的内存信息</td></tr><tr><td>ndarray.real</td><td>ndarray元素的实部</td></tr><tr><td>ndarray.imag</td><td>ndarray 元素的虚部</td></tr><tr><td>ndarray.data</td><td>包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><h3 id="ndarray-ndim" tabindex="-1">ndarray.ndim <a class="header-anchor" href="#ndarray-ndim" aria-label="Permalink to &quot;ndarray.ndim&quot;">​</a></h3><p>ndarray.ndim 用于返回数组的维数，等于秩。</p><h2 id="实例-9" tabindex="-1">实例 <a class="header-anchor" href="#实例-9" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(24) print (a.ndim) # a 现只有一个维度 # 现在调整其大小 b = a.reshape(2,4,3) # b 现在拥有三个维度 print (b.ndim)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>3</span></span></code></pre></div><h3 id="ndarray-shape" tabindex="-1">ndarray.shape <a class="header-anchor" href="#ndarray-shape" aria-label="Permalink to &quot;ndarray.shape&quot;">​</a></h3><p>ndarray.shape 表示数组的维度，返回一个元组，这个元组的长度就是维度的数目，即 ndim 属性(秩)。比如，一个二维数组，其维度表示&quot;行数&quot;和&quot;列数&quot;。</p><p>ndarray.shape 也可以用于调整数组大小。</p><h2 id="实例-10" tabindex="-1">实例 <a class="header-anchor" href="#实例-10" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[4,5,6]]) print (a.shape)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(2, 3)</span></span></code></pre></div><p>调整数组大小。</p><h2 id="实例-11" tabindex="-1">实例 <a class="header-anchor" href="#实例-11" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[4,5,6]]) a.shape = (3,2) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]]</span></span></code></pre></div><p>NumPy 也提供了 reshape 函数来调整数组大小。</p><h2 id="实例-12" tabindex="-1">实例 <a class="header-anchor" href="#实例-12" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[4,5,6]]) b = a.reshape(3,2) print (b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]]</span></span></code></pre></div><h3 id="ndarray-itemsize" tabindex="-1">ndarray.itemsize <a class="header-anchor" href="#ndarray-itemsize" aria-label="Permalink to &quot;ndarray.itemsize&quot;">​</a></h3><p>ndarray.itemsize 以字节的形式返回数组中每一个元素的大小。</p><p>例如，一个元素类型为 float64 的数组 itemsize 属性值为 8(float64 占用 64 个 bits，每个字节长度为 8，所以 64/8，占用 8 个字节），又如，一个元素类型为 complex32 的数组 item 属性为 4（32/8）。</p><h2 id="实例-13" tabindex="-1">实例 <a class="header-anchor" href="#实例-13" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 数组的 dtype 为 int8（一个字节） x = np.array([1,2,3,4,5], dtype = np.int8) print (x.itemsize) # 数组的 dtype 现在为 float64（八个字节） y = np.array([1,2,3,4,5], dtype = np.float64) print (y.itemsize)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>8</span></span></code></pre></div><h3 id="ndarray-flags" tabindex="-1">ndarray.flags <a class="header-anchor" href="#ndarray-flags" aria-label="Permalink to &quot;ndarray.flags&quot;">​</a></h3><p>ndarray.flags 返回 ndarray 对象的内存信息，包含以下属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">C_CONTIGUOUS (C)</td><td style="text-align:left;">数据是在一个单一的C风格的连续段中</td></tr><tr><td style="text-align:left;">F_CONTIGUOUS (F)</td><td style="text-align:left;">数据是在一个单一的Fortran风格的连续段中</td></tr><tr><td style="text-align:left;">OWNDATA (O)</td><td style="text-align:left;">数组拥有它所使用的内存或从另一个对象中借用它</td></tr><tr><td style="text-align:left;">WRITEABLE (W)</td><td style="text-align:left;">数据区域可以被写入，将该值设置为 False，则数据为只读</td></tr><tr><td style="text-align:left;">ALIGNED (A)</td><td style="text-align:left;">数据和所有元素都适当地对齐到硬件上</td></tr><tr><td style="text-align:left;">UPDATEIFCOPY (U)</td><td style="text-align:left;">这个数组是其它数组的一个副本，当这个数组被释放时，原数组的内容将被更新</td></tr></tbody></table><h2 id="实例-14" tabindex="-1">实例 <a class="header-anchor" href="#实例-14" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([1,2,3,4,5]) print (x.flags)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>  C_CONTIGUOUS : True</span></span>
<span class="line"><span>  F_CONTIGUOUS : True</span></span>
<span class="line"><span>  OWNDATA : True</span></span>
<span class="line"><span>  WRITEABLE : True</span></span>
<span class="line"><span>  ALIGNED : True</span></span>
<span class="line"><span>  WRITEBACKIFCOPY : False</span></span>
<span class="line"><span>  UPDATEIFCOPY : False</span></span></code></pre></div><h1 id="numpy-创建数组" tabindex="-1">NumPy 创建数组 <a class="header-anchor" href="#numpy-创建数组" aria-label="Permalink to &quot;NumPy 创建数组&quot;">​</a></h1><p>ndarray 数组除了可以使用底层 ndarray 构造器来创建外，也可以通过以下几种方式来创建。</p><h3 id="numpy-empty" tabindex="-1">numpy.empty <a class="header-anchor" href="#numpy-empty" aria-label="Permalink to &quot;numpy.empty&quot;">​</a></h3><p>numpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.empty(shape, dtype = float, order = &#39;C&#39;)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">shape</td><td style="text-align:left;">数组形状</td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">数据类型，可选</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">有&quot;C&quot;和&quot;F&quot;两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td></tr></tbody></table><p>下面是一个创建空数组的实例：</p><h2 id="实例-15" tabindex="-1">实例 <a class="header-anchor" href="#实例-15" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.empty([3,2], dtype = int) print (x)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[ 6917529027641081856  5764616291768666155]</span></span>
<span class="line"><span> [ 6917529027641081859 -5764598754299804209]</span></span>
<span class="line"><span> [          4497473538      844429428932120]]</span></span></code></pre></div><p><strong>注意</strong> − 数组元素为随机值，因为它们未初始化。</p><h3 id="numpy-zeros" tabindex="-1">numpy.zeros <a class="header-anchor" href="#numpy-zeros" aria-label="Permalink to &quot;numpy.zeros&quot;">​</a></h3><p>创建指定大小的数组，数组元素以 0 来填充：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.zeros(shape, dtype = float, order = &#39;C&#39;)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">shape</td><td style="text-align:left;">数组形状</td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">数据类型，可选</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">&#39;C&#39; 用于 C 的行数组，或者 &#39;F&#39; 用于 FORTRAN 的列数组</td></tr></tbody></table><h2 id="实例-16" tabindex="-1">实例 <a class="header-anchor" href="#实例-16" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 默认为浮点数 x = np.zeros(5) print(x) # 设置类型为整数 y = np.zeros((5,), dtype = int) print(y) # 自定义类型 z = np.zeros((2,2), dtype = [(&#39;x&#39;, &#39;i4&#39;), (&#39;y&#39;, &#39;i4&#39;)]) print(z)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[0. 0. 0. 0. 0.]</span></span>
<span class="line"><span>[0 0 0 0 0]</span></span>
<span class="line"><span>[[(0, 0) (0, 0)]</span></span>
<span class="line"><span> [(0, 0) (0, 0)]]</span></span></code></pre></div><h3 id="numpy-ones" tabindex="-1">numpy.ones <a class="header-anchor" href="#numpy-ones" aria-label="Permalink to &quot;numpy.ones&quot;">​</a></h3><p>创建指定形状的数组，数组元素以 1 来填充：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.ones(shape, dtype = None, order = &#39;C&#39;)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">shape</td><td style="text-align:left;">数组形状</td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">数据类型，可选</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">&#39;C&#39; 用于 C 的行数组，或者 &#39;F&#39; 用于 FORTRAN 的列数组</td></tr></tbody></table><h2 id="实例-17" tabindex="-1">实例 <a class="header-anchor" href="#实例-17" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 默认为浮点数 x = np.ones(5) print(x) # 自定义类型 x = np.ones([2,2], dtype = int) print(x)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1. 1. 1. 1. 1.]</span></span>
<span class="line"><span>[[1 1]</span></span>
<span class="line"><span> [1 1]]</span></span></code></pre></div><h3 id="numpy-zeros-like" tabindex="-1">numpy.zeros_like <a class="header-anchor" href="#numpy-zeros-like" aria-label="Permalink to &quot;numpy.zeros_like&quot;">​</a></h3><p>numpy.zeros_like 用于创建一个与给定数组具有相同形状的数组，数组元素以 0 来填充。</p><p>numpy.zeros 和 numpy.zeros_like 都是用于创建一个指定形状的数组，其中所有元素都是 0。</p><p>它们之间的区别在于：numpy.zeros 可以直接指定要创建的数组的形状，而 numpy.zeros_like 则是创建一个与给定数组具有相同形状的数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.zeros_like(a, dtype=None, order=&#39;K&#39;, subok=True, shape=None)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">a</td><td style="text-align:left;">给定要创建相同形状的数组</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">创建的数组的数据类型</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">数组在内存中的存储顺序，可选值为 &#39;C&#39;（按行优先）或 &#39;F&#39;（按列优先），默认为 &#39;K&#39;（保留输入数组的存储顺序）</td></tr><tr><td style="text-align:left;">subok</td><td style="text-align:left;">是否允许返回子类，如果为 True，则返回一个子类对象，否则返回一个与 a 数组具有相同数据类型和存储顺序的数组</td></tr><tr><td style="text-align:left;">shape</td><td style="text-align:left;">创建的数组的形状，如果不指定，则默认为 a 数组的形状。</td></tr></tbody></table><p>创建一个与 arr 形状相同的，所有元素都为 0 的数组：</p><h2 id="实例-18" tabindex="-1">实例 <a class="header-anchor" href="#实例-18" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 创建一个 3x3 的二维数组 arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # 创建一个与 arr 形状相同的，所有元素都为 0 的数组 zeros_arr = np.zeros_like(arr) print(zeros_arr)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[0 0 0]</span></span>
<span class="line"><span> [0 0 0]</span></span>
<span class="line"><span> [0 0 0]]</span></span></code></pre></div><h3 id="numpy-ones-like" tabindex="-1">numpy.ones_like <a class="header-anchor" href="#numpy-ones-like" aria-label="Permalink to &quot;numpy.ones_like&quot;">​</a></h3><p>numpy.ones_like 用于创建一个与给定数组具有相同形状的数组，数组元素以 1 来填充。</p><p>numpy.ones 和 numpy.ones_like 都是用于创建一个指定形状的数组，其中所有元素都是 1。</p><p>它们之间的区别在于：numpy.ones 可以直接指定要创建的数组的形状，而 numpy.ones_like 则是创建一个与给定数组具有相同形状的数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.ones_like(a, dtype=None, order=&#39;K&#39;, subok=True, shape=None)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">a</td><td style="text-align:left;">给定要创建相同形状的数组</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">dtype</td><td style="text-align:left;">创建的数组的数据类型</td></tr><tr><td style="text-align:left;">order</td><td style="text-align:left;">数组在内存中的存储顺序，可选值为 &#39;C&#39;（按行优先）或 &#39;F&#39;（按列优先），默认为 &#39;K&#39;（保留输入数组的存储顺序）</td></tr><tr><td style="text-align:left;">subok</td><td style="text-align:left;">是否允许返回子类，如果为 True，则返回一个子类对象，否则返回一个与 a 数组具有相同数据类型和存储顺序的数组</td></tr><tr><td style="text-align:left;">shape</td><td style="text-align:left;">创建的数组的形状，如果不指定，则默认为 a 数组的形状。</td></tr></tbody></table><p>创建一个与 arr 形状相同的，所有元素都为 1 的数组：</p><h2 id="实例-19" tabindex="-1">实例 <a class="header-anchor" href="#实例-19" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 创建一个 3x3 的二维数组 arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # 创建一个与 arr 形状相同的，所有元素都为 1 的数组 ones_arr = np.ones_like(arr) print(ones_arr)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1 1 1]</span></span>
<span class="line"><span> [1 1 1]</span></span>
<span class="line"><span> [1 1 1]]</span></span></code></pre></div><h1 id="numpy-从已有的数组创建数组" tabindex="-1">NumPy 从已有的数组创建数组 <a class="header-anchor" href="#numpy-从已有的数组创建数组" aria-label="Permalink to &quot;NumPy 从已有的数组创建数组&quot;">​</a></h1><p>本章节我们将学习如何从已有的数组创建数组。</p><h3 id="numpy-asarray" tabindex="-1">numpy.asarray <a class="header-anchor" href="#numpy-asarray" aria-label="Permalink to &quot;numpy.asarray&quot;">​</a></h3><p>numpy.asarray 类似 numpy.array，但 numpy.asarray 参数只有三个，比 numpy.array 少两个。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.asarray(a, dtype = None, order = None)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组</td></tr><tr><td>dtype</td><td>数据类型，可选</td></tr><tr><td>order</td><td>可选，有&quot;C&quot;和&quot;F&quot;两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td></tr></tbody></table><h3 id="实例-20" tabindex="-1">实例 <a class="header-anchor" href="#实例-20" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p>将列表转换为 ndarray:</p><h2 id="实例-21" tabindex="-1">实例 <a class="header-anchor" href="#实例-21" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = [1,2,3] a = np.asarray(x) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1  2  3]</span></span></code></pre></div><p>将元组转换为 ndarray:</p><h2 id="实例-22" tabindex="-1">实例 <a class="header-anchor" href="#实例-22" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = (1,2,3) a = np.asarray(x) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1  2  3]</span></span></code></pre></div><p>将元组列表转换为 ndarray:</p><h2 id="实例-23" tabindex="-1">实例 <a class="header-anchor" href="#实例-23" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = [(1,2,3),(4,5)] a = np.asarray(x) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[(1, 2, 3) (4, 5)]</span></span></code></pre></div><p>设置了 dtype 参数：</p><h2 id="实例-24" tabindex="-1">实例 <a class="header-anchor" href="#实例-24" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = [1,2,3] a = np.asarray(x, dtype = float) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 1.  2.  3.]</span></span></code></pre></div><h3 id="numpy-frombuffer" tabindex="-1">numpy.frombuffer <a class="header-anchor" href="#numpy-frombuffer" aria-label="Permalink to &quot;numpy.frombuffer&quot;">​</a></h3><p>numpy.frombuffer 用于实现动态数组。</p><p>numpy.frombuffer 接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)</span></span></code></pre></div><blockquote><p>**注意：**buffer 是字符串的时候，Python3 默认 str 是 Unicode 类型，所以要转成 bytestring 在原 str 前加上 b。</p></blockquote><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>buffer</td><td>可以是任意对象，会以流的形式读入。</td></tr><tr><td>dtype</td><td>返回数组的数据类型，可选</td></tr><tr><td>count</td><td>读取的数据数量，默认为-1，读取所有数据。</td></tr><tr><td>offset</td><td>读取的起始位置，默认为0。</td></tr></tbody></table><h2 id="python3-x-实例" tabindex="-1">Python3.x 实例 <a class="header-anchor" href="#python3-x-实例" aria-label="Permalink to &quot;Python3.x 实例&quot;">​</a></h2><p>import numpy as np s = b&#39;Hello World&#39; a = np.frombuffer(s, dtype = &#39;S1&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[b&#39;H&#39; b&#39;e&#39; b&#39;l&#39; b&#39;l&#39; b&#39;o&#39; b&#39; &#39; b&#39;W&#39; b&#39;o&#39; b&#39;r&#39; b&#39;l&#39; b&#39;d&#39;]</span></span></code></pre></div><h2 id="python2-x-实例" tabindex="-1">Python2.x 实例 <a class="header-anchor" href="#python2-x-实例" aria-label="Permalink to &quot;Python2.x 实例&quot;">​</a></h2><p>import numpy as np s = &#39;Hello World&#39; a = np.frombuffer(s, dtype = &#39;S1&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[&#39;H&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39; &#39; &#39; &#39;W&#39; &#39;o&#39; &#39;r&#39; &#39;l&#39; &#39;d&#39;]</span></span></code></pre></div><h3 id="numpy-fromiter" tabindex="-1">numpy.fromiter <a class="header-anchor" href="#numpy-fromiter" aria-label="Permalink to &quot;numpy.fromiter&quot;">​</a></h3><p>numpy.fromiter 方法从可迭代对象中建立 ndarray 对象，返回一维数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.fromiter(iterable, dtype, count=-1)</span></span></code></pre></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>iterable</td><td>可迭代对象</td></tr><tr><td>dtype</td><td>返回数组的数据类型</td></tr><tr><td>count</td><td>读取的数据数量，默认为-1，读取所有数据</td></tr></tbody></table><h2 id="实例-25" tabindex="-1">实例 <a class="header-anchor" href="#实例-25" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 使用 range 函数创建列表对象 list=range(5) it=iter(list) # 使用迭代器创建 ndarray x=np.fromiter(it, dtype=float) print(x)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[0. 1. 2. 3. 4.]</span></span></code></pre></div><h1 id="numpy-从数值范围创建数组" tabindex="-1">NumPy 从数值范围创建数组 <a class="header-anchor" href="#numpy-从数值范围创建数组" aria-label="Permalink to &quot;NumPy 从数值范围创建数组&quot;">​</a></h1><p>这一章节我们将学习如何从数值范围创建数组。</p><h3 id="numpy-arange" tabindex="-1">numpy.arange <a class="header-anchor" href="#numpy-arange" aria-label="Permalink to &quot;numpy.arange&quot;">​</a></h3><p>numpy 包中的使用 arange 函数创建数值范围并返回 ndarray 对象，函数格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.arange(start, stop, step, dtype)</span></span></code></pre></div><p>根据 start 与 stop 指定的范围以及 step 设定的步长，生成一个 ndarray。</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>start</code></td><td>起始值，默认为<code>0</code></td></tr><tr><td><code>stop</code></td><td>终止值（不包含）</td></tr><tr><td><code>step</code></td><td>步长，默认为<code>1</code></td></tr><tr><td><code>dtype</code></td><td>返回<code>ndarray</code>的数据类型，如果没有提供，则会使用输入数据的类型。</td></tr></tbody></table><h3 id="实例-26" tabindex="-1">实例 <a class="header-anchor" href="#实例-26" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p>生成 0 到 4 长度为 5 的数组:</p><h2 id="实例-27" tabindex="-1">实例 <a class="header-anchor" href="#实例-27" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.arange(5) print (x)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[0  1  2  3  4]</span></span></code></pre></div><p>设置返回类型位 float:</p><h2 id="实例-28" tabindex="-1">实例 <a class="header-anchor" href="#实例-28" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 设置了 dtype x = np.arange(5, dtype = float) print (x)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[0.  1.  2.  3.  4.]</span></span></code></pre></div><p>设置了起始值、终止值及步长：</p><h2 id="实例-29" tabindex="-1">实例 <a class="header-anchor" href="#实例-29" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.arange(10,20,2) print (x)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[10  12  14  16  18]</span></span></code></pre></div><h3 id="numpy-linspace" tabindex="-1">numpy.linspace <a class="header-anchor" href="#numpy-linspace" aria-label="Permalink to &quot;numpy.linspace&quot;">​</a></h3><p>numpy.linspace 函数用于创建一个一维数组，数组是一个等差数列构成的，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span></code></pre></div><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>start</code></td><td>序列的起始值</td></tr><tr><td><code>stop</code></td><td>序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td></tr><tr><td><code>num</code></td><td>要生成的等步长的样本数量，默认为<code>50</code></td></tr><tr><td><code>endpoint</code></td><td>该值为 <code>true</code> 时，数列中包含<code>stop</code>值，反之不包含，默认是True。</td></tr><tr><td><code>retstep</code></td><td>如果为 True 时，生成的数组中会显示间距，反之不显示。</td></tr><tr><td><code>dtype</code></td><td><code>ndarray</code> 的数据类型</td></tr></tbody></table><p>以下实例用到三个参数，设置起始点为 1 ，终止点为 10，数列个数为 10。</p><h2 id="实例-30" tabindex="-1">实例 <a class="header-anchor" href="#实例-30" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.linspace(1,10,10) print(a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]</span></span></code></pre></div><p>设置元素全部是1的等差数列：</p><h2 id="实例-31" tabindex="-1">实例 <a class="header-anchor" href="#实例-31" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.linspace(1,1,10) print(a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]</span></span></code></pre></div><p>将 endpoint 设为 false，不包含终止值：</p><h2 id="实例-32" tabindex="-1">实例 <a class="header-anchor" href="#实例-32" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.linspace(10, 20, 5, endpoint = False) print(a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[10. 12. 14. 16. 18.]</span></span></code></pre></div><p>如果将 endpoint 设为 true，则会包含 20。</p><p>以下实例设置间距。</p><h2 id="实例-33" tabindex="-1">实例 <a class="header-anchor" href="#实例-33" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a =np.linspace(1,10,10,retstep= True) print(a) # 拓展例子 b =np.linspace(1,10,10).reshape([10,1]) print(b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]), 1.0)</span></span>
<span class="line"><span>[[ 1.]</span></span>
<span class="line"><span> [ 2.]</span></span>
<span class="line"><span> [ 3.]</span></span>
<span class="line"><span> [ 4.]</span></span>
<span class="line"><span> [ 5.]</span></span>
<span class="line"><span> [ 6.]</span></span>
<span class="line"><span> [ 7.]</span></span>
<span class="line"><span> [ 8.]</span></span>
<span class="line"><span> [ 9.]</span></span>
<span class="line"><span> [10.]]</span></span></code></pre></div><h3 id="numpy-logspace" tabindex="-1">numpy.logspace <a class="header-anchor" href="#numpy-logspace" aria-label="Permalink to &quot;numpy.logspace&quot;">​</a></h3><p>numpy.logspace 函数用于创建一个于等比数列。格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)</span></span></code></pre></div><p>base 参数意思是取对数的时候 log 的下标。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>start</code></td><td>序列的起始值为：base ** start</td></tr><tr><td><code>stop</code></td><td>序列的终止值为：base ** stop。如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td></tr><tr><td><code>num</code></td><td>要生成的等步长的样本数量，默认为<code>50</code></td></tr><tr><td><code>endpoint</code></td><td>该值为 <code>true</code> 时，数列中中包含<code>stop</code>值，反之不包含，默认是True。</td></tr><tr><td><code>base</code></td><td>对数 log 的底数。</td></tr><tr><td><code>dtype</code></td><td><code>ndarray</code> 的数据类型</td></tr></tbody></table><h2 id="实例-34" tabindex="-1">实例 <a class="header-anchor" href="#实例-34" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 默认底数是 10 a = np.logspace(1.0, 2.0, num = 10) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 10.           12.91549665     16.68100537      21.5443469  27.82559402      </span></span>
<span class="line"><span>  35.93813664   46.41588834     59.94842503      77.42636827    100.    ]</span></span></code></pre></div><p>将对数的底数设置为 2 :</p><h2 id="实例-35" tabindex="-1">实例 <a class="header-anchor" href="#实例-35" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.logspace(0,9,10,base=2) print (a)</p><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[  1.   2.   4.   8.  16.  32.  64. 128. 256. 512.]</span></span></code></pre></div><h1 id="numpy-切片和索引" tabindex="-1">NumPy 切片和索引 <a class="header-anchor" href="#numpy-切片和索引" aria-label="Permalink to &quot;NumPy  切片和索引&quot;">​</a></h1><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。</p><h2 id="实例-36" tabindex="-1">实例 <a class="header-anchor" href="#实例-36" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(10) s = slice(2,7,2) # 从索引 2 开始到索引 7 停止，间隔为2 print (a[s])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2  4  6]</span></span></code></pre></div><p>以上实例中，我们首先通过 arange() 函数创建 ndarray 对象。 然后，分别设置起始，终止和步长的参数为 2，7 和 2。</p><p>我们也可以通过冒号分隔切片参数 <strong>start:stop:step</strong> 来进行切片操作：</p><h2 id="实例-37" tabindex="-1">实例 <a class="header-anchor" href="#实例-37" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(10) b = a[2:7:2] # 从索引 2 开始到索引 7 停止，间隔为 2 print(b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2  4  6]</span></span></code></pre></div><p>冒号 : 的解释：如果只放置一个参数，如 <strong>[2]</strong>，将返回与该索引相对应的单个元素。如果为 <strong>[2:]</strong>，表示从该索引开始以后的所有项都将被提取。如果使用了两个参数，如 <strong>[2:7]</strong>，那么则提取两个索引(不包括停止索引)之间的项。</p><h2 id="实例-38" tabindex="-1">实例 <a class="header-anchor" href="#实例-38" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(10) # [0 1 2 3 4 5 6 7 8 9] b = a[5] print(b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>5</span></span></code></pre></div><h2 id="实例-39" tabindex="-1">实例 <a class="header-anchor" href="#实例-39" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(10) print(a[2:])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2  3  4  5  6  7  8  9]</span></span></code></pre></div><h2 id="实例-40" tabindex="-1">实例 <a class="header-anchor" href="#实例-40" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(10) # [0 1 2 3 4 5 6 7 8 9] print(a[2:5])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2  3  4]</span></span></code></pre></div><p>多维数组同样适用上述索引提取方法：</p><h2 id="实例-41" tabindex="-1">实例 <a class="header-anchor" href="#实例-41" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[3,4,5],[4,5,6]]) print(a) # 从某个索引处开始切割 print(&#39;从数组索引 a[1:] 处开始切割&#39;) print(a[1:])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [3 4 5]</span></span>
<span class="line"><span> [4 5 6]]</span></span>
<span class="line"><span>从数组索引 a[1:] 处开始切割</span></span>
<span class="line"><span>[[3 4 5]</span></span>
<span class="line"><span> [4 5 6]]</span></span></code></pre></div><p>切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的 ndarray。</p><h2 id="实例-42" tabindex="-1">实例 <a class="header-anchor" href="#实例-42" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[3,4,5],[4,5,6]]) print (a[...,1]) # 第2列元素 print (a[1,...]) # 第2行元素 print (a[...,1:]) # 第2列及剩下的所有元素</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2 4 5]</span></span>
<span class="line"><span>[3 4 5]</span></span>
<span class="line"><span>[[2 3]</span></span>
<span class="line"><span> [4 5]</span></span>
<span class="line"><span> [5 6]]</span></span></code></pre></div><h1 id="numpy-高级索引" tabindex="-1">NumPy 高级索引 <a class="header-anchor" href="#numpy-高级索引" aria-label="Permalink to &quot;NumPy 高级索引&quot;">​</a></h1><p>NumPy 比一般的 Python 序列提供更多的索引方式。</p><p>除了之前看到的用整数和切片的索引外，数组可以由整数数组索引、布尔索引及花式索引。</p><p>NumPy 中的高级索引指的是使用整数数组、布尔数组或者其他序列来访问数组的元素。相比于基本索引，高级索引可以访问到数组中的任意元素，并且可以用来对数组进行复杂的操作和修改。</p><h3 id="整数数组索引" tabindex="-1">整数数组索引 <a class="header-anchor" href="#整数数组索引" aria-label="Permalink to &quot;整数数组索引&quot;">​</a></h3><p>整数数组索引是指使用一个数组来访问另一个数组的元素。这个数组中的每个元素都是目标数组中某个维度上的索引值。</p><p>以下实例获取数组中 <strong>(0,0)，(1,1)</strong> 和 <strong>(2,0)</strong> 位置处的元素。</p><h2 id="实例-43" tabindex="-1">实例 <a class="header-anchor" href="#实例-43" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([[1, 2], [3, 4], [5, 6]]) y = x[[0,1,2], [0,1,0]] print (y)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[1  4  5]</span></span></code></pre></div><p>以下实例获取了 4X3 数组中的四个角的元素。 行索引是 [0,0] 和 [3,3]，而列索引是 [0,2] 和 [0,2]。</p><h2 id="实例-44" tabindex="-1">实例 <a class="header-anchor" href="#实例-44" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([[ 0, 1, 2],[ 3, 4, 5],[ 6, 7, 8],[ 9, 10, 11]]) print (&#39;我们的数组是：&#39; ) print (x) print (&#39;\\n&#39;) rows = np.array([[0,0],[3,3]]) cols = np.array([[0,2],[0,2]]) y = x[rows,cols] print (&#39;这个数组的四个角元素是：&#39;) print (y)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[ 0  1  2]</span></span>
<span class="line"><span> [ 3  4  5]</span></span>
<span class="line"><span> [ 6  7  8]</span></span>
<span class="line"><span> [ 9 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>这个数组的四个角元素是：</span></span>
<span class="line"><span>[[ 0  2]</span></span>
<span class="line"><span> [ 9 11]]</span></span></code></pre></div><p>返回的结果是包含每个角元素的 ndarray 对象。</p><p>可以借助切片 : 或 … 与索引数组组合。如下面例子：</p><h2 id="实例-45" tabindex="-1">实例 <a class="header-anchor" href="#实例-45" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3], [4,5,6],[7,8,9]]) b = a[1:3, 1:3] c = a[1:3,[1,2]] d = a[...,1:] print(b) print(c) print(d)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [8 9]]</span></span>
<span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [8 9]]</span></span>
<span class="line"><span>[[2 3]</span></span>
<span class="line"><span> [5 6]</span></span>
<span class="line"><span> [8 9]]</span></span></code></pre></div><h3 id="布尔索引" tabindex="-1">布尔索引 <a class="header-anchor" href="#布尔索引" aria-label="Permalink to &quot;布尔索引&quot;">​</a></h3><p>我们可以通过一个布尔数组来索引目标数组。</p><p>布尔索引通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><p>以下实例获取大于 5 的元素：</p><h2 id="实例-46" tabindex="-1">实例 <a class="header-anchor" href="#实例-46" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([[ 0, 1, 2],[ 3, 4, 5],[ 6, 7, 8],[ 9, 10, 11]]) print (&#39;我们的数组是：&#39;) print (x) print (&#39;\\n&#39;) # 现在我们会打印出大于 5 的元素 print (&#39;大于 5 的元素是：&#39;) print (x[x &gt; 5])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[ 0  1  2]</span></span>
<span class="line"><span> [ 3  4  5]</span></span>
<span class="line"><span> [ 6  7  8]</span></span>
<span class="line"><span> [ 9 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>大于 5 的元素是：</span></span>
<span class="line"><span>[ 6  7  8  9 10 11]</span></span></code></pre></div><p>以下实例使用了 ~（取补运算符）来过滤 NaN。</p><h2 id="实例-47" tabindex="-1">实例 <a class="header-anchor" href="#实例-47" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([np.nan, 1,2,np.nan,3,4,5]) print (a[~np.isnan(a)])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 1.   2.   3.   4.   5.]</span></span></code></pre></div><p>以下实例演示如何从数组中过滤掉非复数元素。</p><h2 id="实例-48" tabindex="-1">实例 <a class="header-anchor" href="#实例-48" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([1, 2+6j, 5, 3.5+5j]) print (a[np.iscomplex(a)])</p><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[2.0+6.j  3.5+5.j]</span></span></code></pre></div><h3 id="花式索引" tabindex="-1">花式索引 <a class="header-anchor" href="#花式索引" aria-label="Permalink to &quot;花式索引&quot;">​</a></h3><p>花式索引指的是利用整数数组进行索引。</p><p><strong>花式索引根据索引数组的值作为目标数组的某个轴的下标来取值。</strong></p><p>对于使用一维整型数组作为索引，如果目标是一维数组，那么索引的结果就是对应位置的元素，如果目标是二维数组，那么就是对应下标的行。</p><p>花式索引跟切片不一样，它总是将数据复制到新数组中。</p><h3 id="一维数组" tabindex="-1">一维数组 <a class="header-anchor" href="#一维数组" aria-label="Permalink to &quot;一维数组&quot;">​</a></h3><p>一维数组只有一个轴 <strong>axis = 0</strong>，所以一维数组就在 <strong>axis = 0</strong> 这个轴上取值：</p><h2 id="实例-49" tabindex="-1">实例 <a class="header-anchor" href="#实例-49" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p><strong>import</strong> numpy <strong>as</strong> np</p><p>x = np.arange(9) <strong>print</strong>(x) # 一维数组读取指定下标对应的元素 <strong>print</strong>(&quot;-------读取下标对应的元素-------&quot;) x2 = x[[0, 6]] # 使用花式索引 <strong>print</strong>(x2)</p><p><strong>print</strong>(x2[0]) <strong>print</strong>(x2[1])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[0 1 2 3 4 5 6 7 8]</span></span>
<span class="line"><span>-------读取下标对应的元素-------</span></span>
<span class="line"><span>[0 6]</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>6</span></span></code></pre></div><h3 id="二维数组" tabindex="-1">二维数组 <a class="header-anchor" href="#二维数组" aria-label="Permalink to &quot;二维数组&quot;">​</a></h3><p>1、传入顺序索引数组</p><h2 id="实例-50" tabindex="-1">实例 <a class="header-anchor" href="#实例-50" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x=np.arange(32).reshape((8,4)) print(x) # 二维数组读取指定下标对应的行 print(&quot;-------读取下标对应的行-------&quot;) print (x[[4,2,1,7]])</p><p>print (x[[4,2,1,7]]) 输出下表为 <strong>4, 2, 1, 7</strong> 对应的行，输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]</span></span>
<span class="line"><span> [12 13 14 15]</span></span>
<span class="line"><span> [16 17 18 19]</span></span>
<span class="line"><span> [20 21 22 23]</span></span>
<span class="line"><span> [24 25 26 27]</span></span>
<span class="line"><span> [28 29 30 31]]</span></span>
<span class="line"><span>-------读取下标对应的行-------</span></span>
<span class="line"><span>[[16 17 18 19]</span></span>
<span class="line"><span> [ 8  9 10 11]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [28 29 30 31]]</span></span></code></pre></div><p>2、传入倒序索引数组</p><h2 id="实例-51" tabindex="-1">实例 <a class="header-anchor" href="#实例-51" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x=np.arange(32).reshape((8,4)) print (x[[-4,-2,-1,-7]])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[16 17 18 19]</span></span>
<span class="line"><span> [24 25 26 27]</span></span>
<span class="line"><span> [28 29 30 31]</span></span>
<span class="line"><span> [ 4  5  6  7]]</span></span></code></pre></div><p>3、传入多个索引数组（要使用 np.ix_）</p><p>np.ix_ 函数就是输入两个数组，产生笛卡尔积的映射关系。</p><p>笛卡尔乘积是指在数学中，两个集合 X 和 Y 的笛卡尔积（Cartesian product），又称直积，表示为 <strong>X×Y</strong>，第一个对象是X的成员而第二个对象是 Y 的所有可能有序对的其中一个成员。</p><p>例如 <strong>A={a,b}, B={0,1,2}</strong>，则：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>A×B={(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}</span></span>
<span class="line"><span>B×A={(0, a), (0, b), (1, a), (1, b), (2, a), (2, b)}</span></span></code></pre></div><h2 id="实例-52" tabindex="-1">实例 <a class="header-anchor" href="#实例-52" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x=np.arange(32).reshape((8,4)) print (x[np.ix_([1,5,7,2],[0,3,1,2])])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[ 4  7  5  6]</span></span>
<span class="line"><span> [20 23 21 22]</span></span>
<span class="line"><span> [28 31 29 30]</span></span>
<span class="line"><span> [ 8 11  9 10]]</span></span></code></pre></div><h1 id="numpy-广播-broadcast" tabindex="-1">NumPy 广播(Broadcast) <a class="header-anchor" href="#numpy-广播-broadcast" aria-label="Permalink to &quot;NumPy 广播(Broadcast)&quot;">​</a></h1><p>广播(Broadcast)是 numpy 对不同形状(shape)的数组进行数值计算的方式， 对数组的算术运算通常在相应的元素上进行。</p><p>如果两个数组 a 和 b 形状相同，即满足 <strong>a.shape == b.shape</strong>，那么 a*b 的结果就是 a 与 b 数组对应位相乘。这要求维数相同，且各维度的长度相同。</p><h2 id="实例-53" tabindex="-1">实例 <a class="header-anchor" href="#实例-53" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([1,2,3,4]) b = np.array([10,20,30,40]) c = a * b print (c)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 10  40  90 160]</span></span></code></pre></div><p>当运算中的 2 个数组的形状不同时，numpy 将自动触发广播机制。如：</p><h2 id="实例-54" tabindex="-1">实例 <a class="header-anchor" href="#实例-54" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[ 0, 0, 0], [10,10,10], [20,20,20], [30,30,30]]) b = np.array([0,1,2]) print(a + b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[ 0  1  2]</span></span>
<span class="line"><span> [10 11 12]</span></span>
<span class="line"><span> [20 21 22]</span></span>
<span class="line"><span> [30 31 32]]</span></span></code></pre></div><p>下面的图片展示了数组 b 如何通过广播来与数组 a 兼容。</p><p><img src="`+i+`" alt="img"></p><p>4x3 的二维数组与长为 3 的一维数组相加，等效于把数组 b 在二维上重复 4 次再运算：</p><h2 id="实例-55" tabindex="-1">实例 <a class="header-anchor" href="#实例-55" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[ 0, 0, 0], [10,10,10], [20,20,20], [30,30,30]]) b = np.array([1,2,3]) bb = np.tile(b, (4, 1)) # 重复 b 的各个维度 print(a + bb)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[[ 1  2  3]</span></span>
<span class="line"><span> [11 12 13]</span></span>
<span class="line"><span> [21 22 23]</span></span>
<span class="line"><span> [31 32 33]]</span></span></code></pre></div><p><strong>广播的规则:</strong></p><ul><li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li><li>输出数组的形状是输入数组形状的各个维度上的最大值。</li><li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li><li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li></ul><p>**简单理解：**对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是 1。</li></ul><p>若条件不满足，抛出 <strong>&quot;ValueError: frames are not aligned&quot;</strong> 异常。</p><h1 id="numpy-迭代数组" tabindex="-1">NumPy 迭代数组 <a class="header-anchor" href="#numpy-迭代数组" aria-label="Permalink to &quot;NumPy 迭代数组&quot;">​</a></h1><p>NumPy 迭代器对象 numpy.nditer 提供了一种灵活访问一个或者多个数组元素的方式。</p><p>迭代器最基本的任务的可以完成对数组元素的访问。</p><p>接下来我们使用 arange() 函数创建一个 2X3 数组，并使用 nditer 对它进行迭代。</p><h2 id="实例-56" tabindex="-1">实例 <a class="header-anchor" href="#实例-56" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(6).reshape(2,3) print (&#39;原始数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;迭代输出元素：&#39;) for x in np.nditer(a): print (x, end=&quot;, &quot; ) print (&#39;\\n&#39;)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组是：</span></span>
<span class="line"><span>[[0 1 2]</span></span>
<span class="line"><span> [3 4 5]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>迭代输出元素：</span></span>
<span class="line"><span>0, 1, 2, 3, 4, 5,</span></span></code></pre></div><p>以上实例不是使用标准 C 或者 Fortran 顺序，选择的顺序是和数组内存布局一致的，这样做是为了提升访问的效率，默认是行序优先（row-major order，或者说是 C-order）。</p><p>这反映了默认情况下只需访问每个元素，而无需考虑其特定顺序。我们可以通过迭代上述数组的转置来看到这一点，并与以 C 顺序访问数组转置的 copy 方式做对比，如下实例：</p><h2 id="实例-57" tabindex="-1">实例 <a class="header-anchor" href="#实例-57" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(6).reshape(2,3) for x in np.nditer(a.T): print (x, end=&quot;, &quot; ) print (&#39;\\n&#39;) for x in np.nditer(a.T.copy(order=&#39;C&#39;)): print (x, end=&quot;, &quot; ) print (&#39;\\n&#39;)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>0, 1, 2, 3, 4, 5, </span></span>
<span class="line"><span></span></span>
<span class="line"><span>0, 3, 1, 4, 2, 5,</span></span></code></pre></div><p>从上述例子可以看出，a 和 a.T 的遍历顺序是一样的，也就是他们在内存中的存储顺序也是一样的，但是 a.T.copy(order = &#39;C&#39;) 的遍历结果是不同的，那是因为它和前两种的存储方式是不一样的，默认是按行访问。</p><h3 id="控制遍历顺序" tabindex="-1">控制遍历顺序 <a class="header-anchor" href="#控制遍历顺序" aria-label="Permalink to &quot;控制遍历顺序&quot;">​</a></h3><ul><li><code>for x in np.nditer(a, order=&#39;F&#39;):</code>Fortran order，即是列序优先；</li><li><code>for x in np.nditer(a.T, order=&#39;C&#39;):</code>C order，即是行序优先；</li></ul><h2 id="实例-58" tabindex="-1">实例 <a class="header-anchor" href="#实例-58" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(0,60,5) a = a.reshape(3,4) print (&#39;原始数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;原始数组的转置是：&#39;) b = a.T print (b) print (&#39;\\n&#39;) print (&#39;以 C 风格顺序排序：&#39;) c = b.copy(order=&#39;C&#39;) print (c) for x in np.nditer(c): print (x, end=&quot;, &quot; ) print (&#39;\\n&#39;) print (&#39;以 F 风格顺序排序：&#39;) c = b.copy(order=&#39;F&#39;) print (c) for x in np.nditer(c): print (x, end=&quot;, &quot; )</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组是：</span></span>
<span class="line"><span>[[ 0  5 10 15]</span></span>
<span class="line"><span> [20 25 30 35]</span></span>
<span class="line"><span> [40 45 50 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>原始数组的转置是：</span></span>
<span class="line"><span>[[ 0 20 40]</span></span>
<span class="line"><span> [ 5 25 45]</span></span>
<span class="line"><span> [10 30 50]</span></span>
<span class="line"><span> [15 35 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 C 风格顺序排序：</span></span>
<span class="line"><span>[[ 0 20 40]</span></span>
<span class="line"><span> [ 5 25 45]</span></span>
<span class="line"><span> [10 30 50]</span></span>
<span class="line"><span> [15 35 55]]</span></span>
<span class="line"><span>0, 20, 40, 5, 25, 45, 10, 30, 50, 15, 35, 55, </span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 F 风格顺序排序：</span></span>
<span class="line"><span>[[ 0 20 40]</span></span>
<span class="line"><span> [ 5 25 45]</span></span>
<span class="line"><span> [10 30 50]</span></span>
<span class="line"><span> [15 35 55]]</span></span>
<span class="line"><span>0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55,</span></span></code></pre></div><p>可以通过显式设置，来强制 nditer 对象使用某种顺序：</p><h2 id="实例-59" tabindex="-1">实例 <a class="header-anchor" href="#实例-59" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(0,60,5) a = a.reshape(3,4) print (&#39;原始数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;以 C 风格顺序排序：&#39;) for x in np.nditer(a, order = &#39;C&#39;): print (x, end=&quot;, &quot; ) print (&#39;\\n&#39;) print (&#39;以 F 风格顺序排序：&#39;) for x in np.nditer(a, order = &#39;F&#39;): print (x, end=&quot;, &quot; )</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组是：</span></span>
<span class="line"><span>[[ 0  5 10 15]</span></span>
<span class="line"><span> [20 25 30 35]</span></span>
<span class="line"><span> [40 45 50 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 C 风格顺序排序：</span></span>
<span class="line"><span>0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, </span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 F 风格顺序排序：</span></span>
<span class="line"><span>0, 20, 40, 5, 25, 45, 10, 30, 50, 15, 35, 55,</span></span></code></pre></div><h3 id="修改数组中元素的值" tabindex="-1">修改数组中元素的值 <a class="header-anchor" href="#修改数组中元素的值" aria-label="Permalink to &quot;修改数组中元素的值&quot;">​</a></h3><p>nditer 对象有另一个可选参数 op_flags。 默认情况下，nditer 将视待迭代遍历的数组为只读对象（read-only），为了在遍历数组的同时，实现对数组元素值的修改，必须指定 readwrite 或者 writeonly 的模式。</p><h2 id="实例-60" tabindex="-1">实例 <a class="header-anchor" href="#实例-60" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(0,60,5) a = a.reshape(3,4) print (&#39;原始数组是：&#39;) print (a) print (&#39;\\n&#39;) for x in np.nditer(a, op_flags=[&#39;readwrite&#39;]): x[...]=2*x print (&#39;修改后的数组是：&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组是：</span></span>
<span class="line"><span>[[ 0  5 10 15]</span></span>
<span class="line"><span> [20 25 30 35]</span></span>
<span class="line"><span> [40 45 50 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组是：</span></span>
<span class="line"><span>[[  0  10  20  30]</span></span>
<span class="line"><span> [ 40  50  60  70]</span></span>
<span class="line"><span> [ 80  90 100 110]]</span></span></code></pre></div><h3 id="使用外部循环" tabindex="-1">使用外部循环 <a class="header-anchor" href="#使用外部循环" aria-label="Permalink to &quot;使用外部循环&quot;">​</a></h3><p>nditer 类的构造器拥有 flags 参数，它可以接受下列值：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>c_index</code></td><td>可以跟踪 C 顺序的索引</td></tr><tr><td><code>f_index</code></td><td>可以跟踪 Fortran 顺序的索引</td></tr><tr><td><code>multi_index</code></td><td>每次迭代可以跟踪一种索引类型</td></tr><tr><td><code>external_loop</code></td><td>给出的值是具有多个值的一维数组，而不是零维数组</td></tr></tbody></table><p>在下面的实例中，迭代器遍历对应于每列，并组合为一维数组。</p><h2 id="实例-61" tabindex="-1">实例 <a class="header-anchor" href="#实例-61" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(0,60,5) a = a.reshape(3,4) print (&#39;原始数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;修改后的数组是：&#39;) for x in np.nditer(a, flags = [&#39;external_loop&#39;], order = &#39;F&#39;): print (x, end=&quot;, &quot; )</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组是：</span></span>
<span class="line"><span>[[ 0  5 10 15]</span></span>
<span class="line"><span> [20 25 30 35]</span></span>
<span class="line"><span> [40 45 50 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组是：</span></span>
<span class="line"><span>[ 0 20 40], [ 5 25 45], [10 30 50], [15 35 55],</span></span></code></pre></div><h3 id="广播迭代" tabindex="-1">广播迭代 <a class="header-anchor" href="#广播迭代" aria-label="Permalink to &quot;广播迭代&quot;">​</a></h3><p>如果两个数组是可广播的，nditer 组合对象能够同时迭代它们。 假设数组 a 的维度为 3X4，数组 b 的维度为 1X4 ，则使用以下迭代器（数组 b 被广播到 a 的大小）。</p><h2 id="实例-62" tabindex="-1">实例 <a class="header-anchor" href="#实例-62" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(0,60,5) a = a.reshape(3,4) print (&#39;第一个数组为：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;第二个数组为：&#39;) b = np.array([1, 2, 3, 4], dtype = int) print (b) print (&#39;\\n&#39;) print (&#39;修改后的数组为：&#39;) for x,y in np.nditer([a,b]): print (&quot;%d:%d&quot; % (x,y), end=&quot;, &quot; )</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组为：</span></span>
<span class="line"><span>[[ 0  5 10 15]</span></span>
<span class="line"><span> [20 25 30 35]</span></span>
<span class="line"><span> [40 45 50 55]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组为：</span></span>
<span class="line"><span>[1 2 3 4]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组为：</span></span>
<span class="line"><span>0:1, 5:2, 10:3, 15:4, 20:1, 25:2, 30:3, 35:4, 40:1, 45:2, 50:3, 55:4,</span></span></code></pre></div><h1 id="numpy-数组操作" tabindex="-1">Numpy 数组操作 <a class="header-anchor" href="#numpy-数组操作" aria-label="Permalink to &quot;Numpy 数组操作&quot;">​</a></h1><p>Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：</p><ul><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr1" target="_blank" rel="noreferrer">修改数组形状</a></li><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr2" target="_blank" rel="noreferrer">翻转数组</a></li><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr3" target="_blank" rel="noreferrer">修改数组维度</a></li><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr4" target="_blank" rel="noreferrer">连接数组</a></li><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr5" target="_blank" rel="noreferrer">分割数组</a></li><li><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html#numpy_oparr6" target="_blank" rel="noreferrer">数组元素的添加与删除</a></li></ul><hr><h2 id="修改数组形状" tabindex="-1">修改数组形状 <a class="header-anchor" href="#修改数组形状" aria-label="Permalink to &quot;修改数组形状&quot;">​</a></h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>reshape</code></td><td>不改变数据的条件下修改形状</td></tr><tr><td><code>flat</code></td><td>数组元素迭代器</td></tr><tr><td><code>flatten</code></td><td>返回一份数组拷贝，对拷贝所做的修改不会影响原始数组</td></tr><tr><td><code>ravel</code></td><td>返回展开数组</td></tr></tbody></table><h3 id="numpy-reshape" tabindex="-1">numpy.reshape <a class="header-anchor" href="#numpy-reshape" aria-label="Permalink to &quot;numpy.reshape&quot;">​</a></h3><p>numpy.reshape 函数可以在不改变数据的条件下修改形状，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.reshape(arr, newshape, order=&#39;C&#39;)</span></span></code></pre></div><ul><li><code>arr</code>：要修改形状的数组</li><li><code>newshape</code>：整数或者整数数组，新的形状应当兼容原有形状</li><li>order：&#39;C&#39; -- 按行，&#39;F&#39; -- 按列，&#39;A&#39; -- 原顺序，&#39;k&#39; -- 元素在内存中的出现顺序。</li></ul><h2 id="实例-63" tabindex="-1">实例 <a class="header-anchor" href="#实例-63" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(8) print (&#39;原始数组：&#39;) print (a) print (&#39;\\n&#39;) b = a.reshape(4,2) print (&#39;修改后的数组：&#39;) print (b)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组：</span></span>
<span class="line"><span>[0 1 2 3 4 5 6 7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]</span></span>
<span class="line"><span> [6 7]]</span></span></code></pre></div><h3 id="numpy-ndarray-flat" tabindex="-1">numpy.ndarray.flat <a class="header-anchor" href="#numpy-ndarray-flat" aria-label="Permalink to &quot;numpy.ndarray.flat&quot;">​</a></h3><p>numpy.ndarray.flat 是一个数组元素迭代器，实例如下:</p><h2 id="实例-64" tabindex="-1">实例 <a class="header-anchor" href="#实例-64" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(9).reshape(3,3) print (&#39;原始数组：&#39;) for row in a: print (row) #对数组中每个元素都进行处理，可以使用flat属性，该属性是一个数组元素迭代器： print (&#39;迭代后的数组：&#39;) for element in a.flat: print (element)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原始数组：</span></span>
<span class="line"><span>[0 1 2]</span></span>
<span class="line"><span>[3 4 5]</span></span>
<span class="line"><span>[6 7 8]</span></span>
<span class="line"><span>迭代后的数组：</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span>8</span></span></code></pre></div><h3 id="numpy-ndarray-flatten" tabindex="-1">numpy.ndarray.flatten <a class="header-anchor" href="#numpy-ndarray-flatten" aria-label="Permalink to &quot;numpy.ndarray.flatten&quot;">​</a></h3><p>numpy.ndarray.flatten 返回一份数组拷贝，对拷贝所做的修改不会影响原始数组，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ndarray.flatten(order=&#39;C&#39;)</span></span></code></pre></div><p>参数说明：</p><ul><li>order：&#39;C&#39; -- 按行，&#39;F&#39; -- 按列，&#39;A&#39; -- 原顺序，&#39;K&#39; -- 元素在内存中的出现顺序。</li></ul><h2 id="实例-65" tabindex="-1">实例 <a class="header-anchor" href="#实例-65" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(8).reshape(2,4) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) # 默认按行 print (&#39;展开的数组：&#39;) print (a.flatten()) print (&#39;\\n&#39;) print (&#39;以 F 风格顺序展开的数组：&#39;) print (a.flatten(order = &#39;F&#39;))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[0 1 2 3]</span></span>
<span class="line"><span> [4 5 6 7]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>展开的数组：</span></span>
<span class="line"><span>[0 1 2 3 4 5 6 7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 F 风格顺序展开的数组：</span></span>
<span class="line"><span>[0 4 1 5 2 6 3 7]</span></span></code></pre></div><h3 id="numpy-ravel" tabindex="-1">numpy.ravel <a class="header-anchor" href="#numpy-ravel" aria-label="Permalink to &quot;numpy.ravel&quot;">​</a></h3><p>numpy.ravel() 展平的数组元素，顺序通常是&quot;C风格&quot;，返回的是数组视图（view，有点类似 C/C++引用reference的意味），修改会影响原始数组。</p><p>该函数接收两个参数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.ravel(a, order=&#39;C&#39;)</span></span></code></pre></div><p>参数说明：</p><ul><li>order：&#39;C&#39; -- 按行，&#39;F&#39; -- 按列，&#39;A&#39; -- 原顺序，&#39;K&#39; -- 元素在内存中的出现顺序。</li></ul><h2 id="实例-66" tabindex="-1">实例 <a class="header-anchor" href="#实例-66" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(8).reshape(2,4) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 ravel 函数之后：&#39;) print (a.ravel()) print (&#39;\\n&#39;) print (&#39;以 F 风格顺序调用 ravel 函数之后：&#39;) print (a.ravel(order = &#39;F&#39;))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[0 1 2 3]</span></span>
<span class="line"><span> [4 5 6 7]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 ravel 函数之后：</span></span>
<span class="line"><span>[0 1 2 3 4 5 6 7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>以 F 风格顺序调用 ravel 函数之后：</span></span>
<span class="line"><span>[0 4 1 5 2 6 3 7]</span></span></code></pre></div><hr><h2 id="翻转数组" tabindex="-1">翻转数组 <a class="header-anchor" href="#翻转数组" aria-label="Permalink to &quot;翻转数组&quot;">​</a></h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>transpose</code></td><td>对换数组的维度</td></tr><tr><td><code>ndarray.T</code></td><td>和 <code>self.transpose()</code> 相同</td></tr><tr><td><code>rollaxis</code></td><td>向后滚动指定的轴</td></tr><tr><td><code>swapaxes</code></td><td>对换数组的两个轴</td></tr></tbody></table><h3 id="numpy-transpose" tabindex="-1">numpy.transpose <a class="header-anchor" href="#numpy-transpose" aria-label="Permalink to &quot;numpy.transpose&quot;">​</a></h3><p>numpy.transpose 函数用于对换数组的维度，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.transpose(arr, axes)</span></span></code></pre></div><p>参数说明:</p><ul><li><code>arr</code>：要操作的数组</li><li><code>axes</code>：整数列表，对应维度，通常所有维度都会对换。</li></ul><h2 id="实例-67" tabindex="-1">实例 <a class="header-anchor" href="#实例-67" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(12).reshape(3,4) print (&#39;原数组：&#39;) print (a ) print (&#39;\\n&#39;) print (&#39;对换数组：&#39;) print (np.transpose(a))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>对换数组：</span></span>
<span class="line"><span>[[ 0  4  8]</span></span>
<span class="line"><span> [ 1  5  9]</span></span>
<span class="line"><span> [ 2  6 10]</span></span>
<span class="line"><span> [ 3  7 11]]</span></span></code></pre></div><p>numpy.ndarray.T 类似 numpy.transpose：</p><h2 id="实例-68" tabindex="-1">实例 <a class="header-anchor" href="#实例-68" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(12).reshape(3,4) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;转置数组：&#39;) print (a.T)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>转置数组：</span></span>
<span class="line"><span>[[ 0  4  8]</span></span>
<span class="line"><span> [ 1  5  9]</span></span>
<span class="line"><span> [ 2  6 10]</span></span>
<span class="line"><span> [ 3  7 11]]</span></span></code></pre></div><h3 id="numpy-rollaxis" tabindex="-1">numpy.rollaxis <a class="header-anchor" href="#numpy-rollaxis" aria-label="Permalink to &quot;numpy.rollaxis&quot;">​</a></h3><p>numpy.rollaxis 函数向后滚动特定的轴到一个特定位置，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.rollaxis(arr, axis, start)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：数组</li><li><code>axis</code>：要向后滚动的轴，其它轴的相对位置不会改变</li><li><code>start</code>：默认为零，表示完整的滚动。会滚动到特定位置。</li></ul><h2 id="实例-69" tabindex="-1">实例 <a class="header-anchor" href="#实例-69" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 创建了三维的 ndarray a = np.arange(8).reshape(2,2,2) print (&#39;原数组：&#39;) print (a) print (&#39;获取数组中一个值：&#39;) print(np.where(a==6)) print(a[1,1,0]) # 为 6 print (&#39;\\n&#39;) # 将轴 2 滚动到轴 0（宽度到深度） print (&#39;调用 rollaxis 函数：&#39;) b = np.rollaxis(a,2,0) print (b) # 查看元素 a[1,1,0]，即 6 的坐标，变成 [0, 1, 1] # 最后一个 0 移动到最前面 print(np.where(b==6)) print (&#39;\\n&#39;) # 将轴 2 滚动到轴 1：（宽度到高度） print (&#39;调用 rollaxis 函数：&#39;) c = np.rollaxis(a,2,1) print (c) # 查看元素 a[1,1,0]，即 6 的坐标，变成 [1, 0, 1] # 最后的 0 和 它前面的 1 对换位置 print(np.where(c==6)) print (&#39;\\n&#39;)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[[0 1]</span></span>
<span class="line"><span>  [2 3]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[4 5]</span></span>
<span class="line"><span>  [6 7]]]</span></span>
<span class="line"><span>获取数组中一个值：</span></span>
<span class="line"><span>(array([1]), array([1]), array([0]))</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 rollaxis 函数：</span></span>
<span class="line"><span>[[[0 2]</span></span>
<span class="line"><span>  [4 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[1 3]</span></span>
<span class="line"><span>  [5 7]]]</span></span>
<span class="line"><span>(array([0]), array([1]), array([1]))</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 rollaxis 函数：</span></span>
<span class="line"><span>[[[0 2]</span></span>
<span class="line"><span>  [1 3]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[4 6]</span></span>
<span class="line"><span>  [5 7]]]</span></span>
<span class="line"><span>(array([1]), array([0]), array([1]))</span></span></code></pre></div><h3 id="numpy-swapaxes" tabindex="-1">numpy.swapaxes <a class="header-anchor" href="#numpy-swapaxes" aria-label="Permalink to &quot;numpy.swapaxes&quot;">​</a></h3><p>numpy.swapaxes 函数用于交换数组的两个轴，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.swapaxes(arr, axis1, axis2)</span></span></code></pre></div><ul><li><code>arr</code>：输入的数组</li><li><code>axis1</code>：对应第一个轴的整数</li><li><code>axis2</code>：对应第二个轴的整数</li></ul><h2 id="实例-70" tabindex="-1">实例 <a class="header-anchor" href="#实例-70" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 创建了三维的 ndarray a = np.arange(8).reshape(2,2,2) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) # 现在交换轴 0（深度方向）到轴 2（宽度方向） print (&#39;调用 swapaxes 函数后的数组：&#39;) print (np.swapaxes(a, 2, 0))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[[0 1]</span></span>
<span class="line"><span>  [2 3]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[4 5]</span></span>
<span class="line"><span>  [6 7]]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 swapaxes 函数后的数组：</span></span>
<span class="line"><span>[[[0 4]</span></span>
<span class="line"><span>  [2 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[1 5]</span></span>
<span class="line"><span>  [3 7]]]</span></span></code></pre></div><hr><h2 id="修改数组维度" tabindex="-1">修改数组维度 <a class="header-anchor" href="#修改数组维度" aria-label="Permalink to &quot;修改数组维度&quot;">​</a></h2><table><thead><tr><th>维度</th><th>描述</th></tr></thead><tbody><tr><td><code>broadcast</code></td><td>产生模仿广播的对象</td></tr><tr><td><code>broadcast_to</code></td><td>将数组广播到新形状</td></tr><tr><td><code>expand_dims</code></td><td>扩展数组的形状</td></tr><tr><td><code>squeeze</code></td><td>从数组的形状中删除一维条目</td></tr></tbody></table><h3 id="numpy-broadcast" tabindex="-1">numpy.broadcast <a class="header-anchor" href="#numpy-broadcast" aria-label="Permalink to &quot;numpy.broadcast&quot;">​</a></h3><p>numpy.broadcast 用于模仿广播的对象，它返回一个对象，该对象封装了将一个数组广播到另一个数组的结果。</p><p>该函数使用两个数组作为输入参数，如下实例：</p><h2 id="实例-71" tabindex="-1">实例 <a class="header-anchor" href="#实例-71" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([[1], [2], [3]]) y = np.array([4, 5, 6]) # 对 y 广播 x b = np.broadcast(x,y) # 它拥有 iterator 属性，基于自身组件的迭代器元组 print (&#39;对 y 广播 x：&#39;) r,c = b.iters # Python3.x 为 next(context) ，Python2.x 为 context.next() print (next(r), next(c)) print (next(r), next(c)) print (&#39;\\n&#39;) # shape 属性返回广播对象的形状 print (&#39;广播对象的形状：&#39;) print (b.shape) print (&#39;\\n&#39;) # 手动使用 broadcast 将 x 与 y 相加 b = np.broadcast(x,y) c = np.empty(b.shape) print (&#39;手动使用 broadcast 将 x 与 y 相加：&#39;) print (c.shape) print (&#39;\\n&#39;) c.flat = [u + v for (u,v) in b] print (&#39;调用 flat 函数：&#39;) print (c) print (&#39;\\n&#39;) # 获得了和 NumPy 内建的广播支持相同的结果 print (&#39;x 与 y 的和：&#39;) print (x + y)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>对 y 广播 x：</span></span>
<span class="line"><span>1 4</span></span>
<span class="line"><span>1 5</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>广播对象的形状：</span></span>
<span class="line"><span>(3, 3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>手动使用 broadcast 将 x 与 y 相加：</span></span>
<span class="line"><span>(3, 3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 flat 函数：</span></span>
<span class="line"><span>[[5. 6. 7.]</span></span>
<span class="line"><span> [6. 7. 8.]</span></span>
<span class="line"><span> [7. 8. 9.]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>x 与 y 的和：</span></span>
<span class="line"><span>[[5 6 7]</span></span>
<span class="line"><span> [6 7 8]</span></span>
<span class="line"><span> [7 8 9]]</span></span></code></pre></div><h3 id="numpy-broadcast-to" tabindex="-1">numpy.broadcast_to <a class="header-anchor" href="#numpy-broadcast-to" aria-label="Permalink to &quot;numpy.broadcast_to&quot;">​</a></h3><p>numpy.broadcast_to 函数将数组广播到新形状。它在原始数组上返回只读视图。 它通常不连续。 如果新形状不符合 NumPy 的广播规则，该函数可能会抛出ValueError。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.broadcast_to(array, shape, subok)</span></span></code></pre></div><h2 id="实例-72" tabindex="-1">实例 <a class="header-anchor" href="#实例-72" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(4).reshape(1,4) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 broadcast_to 函数之后：&#39;) print (np.broadcast_to(a,(4,4)))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[[0 1 2 3]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 broadcast_to 函数之后：</span></span>
<span class="line"><span>[[0 1 2 3]</span></span>
<span class="line"><span> [0 1 2 3]</span></span>
<span class="line"><span> [0 1 2 3]</span></span>
<span class="line"><span> [0 1 2 3]]</span></span></code></pre></div><h3 id="numpy-expand-dims" tabindex="-1">numpy.expand_dims <a class="header-anchor" href="#numpy-expand-dims" aria-label="Permalink to &quot;numpy.expand_dims&quot;">​</a></h3><p>numpy.expand_dims 函数通过在指定位置插入新的轴来扩展数组形状，函数格式如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> numpy.expand_dims(arr, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：新轴插入的位置</li></ul><h2 id="实例-73" tabindex="-1">实例 <a class="header-anchor" href="#实例-73" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array(([1,2],[3,4])) print (&#39;数组 x：&#39;) print (x) print (&#39;\\n&#39;) y = np.expand_dims(x, axis = 0) print (&#39;数组 y：&#39;) print (y) print (&#39;\\n&#39;) print (&#39;数组 x 和 y 的形状：&#39;) print (x.shape, y.shape) print (&#39;\\n&#39;) # 在位置 1 插入轴 y = np.expand_dims(x, axis = 1) print (&#39;在位置 1 插入轴之后的数组 y：&#39;) print (y) print (&#39;\\n&#39;) print (&#39;x.ndim 和 y.ndim：&#39;) print (x.ndim,y.ndim) print (&#39;\\n&#39;) print (&#39;x.shape 和 y.shape：&#39;) print (x.shape, y.shape)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数组 x：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组 y：</span></span>
<span class="line"><span>[[[1 2]</span></span>
<span class="line"><span>  [3 4]]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组 x 和 y 的形状：</span></span>
<span class="line"><span>(2, 2) (1, 2, 2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>在位置 1 插入轴之后的数组 y：</span></span>
<span class="line"><span>[[[1 2]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[3 4]]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>x.ndim 和 y.ndim：</span></span>
<span class="line"><span>2 3</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>x.shape 和 y.shape：</span></span>
<span class="line"><span>(2, 2) (2, 1, 2)</span></span></code></pre></div><h3 id="numpy-squeeze" tabindex="-1">numpy.squeeze <a class="header-anchor" href="#numpy-squeeze" aria-label="Permalink to &quot;numpy.squeeze&quot;">​</a></h3><p>numpy.squeeze 函数从给定数组的形状中删除一维的条目，函数格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.squeeze(arr, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：整数或整数元组，用于选择形状中一维条目的子集</li></ul><h2 id="实例-74" tabindex="-1">实例 <a class="header-anchor" href="#实例-74" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.arange(9).reshape(1,3,3) print (&#39;数组 x：&#39;) print (x) print (&#39;\\n&#39;) y = np.squeeze(x) print (&#39;数组 y：&#39;) print (y) print (&#39;\\n&#39;) print (&#39;数组 x 和 y 的形状：&#39;) print (x.shape, y.shape)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数组 x：</span></span>
<span class="line"><span>[[[0 1 2]</span></span>
<span class="line"><span>  [3 4 5]</span></span>
<span class="line"><span>  [6 7 8]]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组 y：</span></span>
<span class="line"><span>[[0 1 2]</span></span>
<span class="line"><span> [3 4 5]</span></span>
<span class="line"><span> [6 7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组 x 和 y 的形状：</span></span>
<span class="line"><span>(1, 3, 3) (3, 3)</span></span></code></pre></div><hr><h2 id="连接数组" tabindex="-1">连接数组 <a class="header-anchor" href="#连接数组" aria-label="Permalink to &quot;连接数组&quot;">​</a></h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>concatenate</code></td><td>连接沿现有轴的数组序列</td></tr><tr><td><code>stack</code></td><td>沿着新的轴加入一系列数组。</td></tr><tr><td><code>hstack</code></td><td>水平堆叠序列中的数组（列方向）</td></tr><tr><td><code>vstack</code></td><td>竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><h3 id="numpy-concatenate" tabindex="-1">numpy.concatenate <a class="header-anchor" href="#numpy-concatenate" aria-label="Permalink to &quot;numpy.concatenate&quot;">​</a></h3><p>numpy.concatenate 函数用于沿指定轴连接相同形状的两个或多个数组，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.concatenate((a1, a2, ...), axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a1, a2, ...</code>：相同类型的数组</li><li><code>axis</code>：沿着它连接数组的轴，默认为 0</li></ul><h2 id="实例-75" tabindex="-1">实例 <a class="header-anchor" href="#实例-75" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2],[3,4]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) b = np.array([[5,6],[7,8]]) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) # 两个数组的维度相同 print (&#39;沿轴 0 连接两个数组：&#39;) print (np.concatenate((a,b))) print (&#39;\\n&#39;) print (&#39;沿轴 1 连接两个数组：&#39;) print (np.concatenate((a,b),axis = 1))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 连接两个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]</span></span>
<span class="line"><span> [7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 连接两个数组：</span></span>
<span class="line"><span>[[1 2 5 6]</span></span>
<span class="line"><span> [3 4 7 8]]</span></span></code></pre></div><h3 id="numpy-stack" tabindex="-1">numpy.stack <a class="header-anchor" href="#numpy-stack" aria-label="Permalink to &quot;numpy.stack&quot;">​</a></h3><p>numpy.stack 函数用于沿新轴连接数组序列，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.stack(arrays, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arrays</code>相同形状的数组序列</li><li><code>axis</code>：返回数组中的轴，输入数组沿着它来堆叠</li></ul><h2 id="实例-76" tabindex="-1">实例 <a class="header-anchor" href="#实例-76" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2],[3,4]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) b = np.array([[5,6],[7,8]]) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) print (&#39;沿轴 0 堆叠两个数组：&#39;) print (np.stack((a,b),0)) print (&#39;\\n&#39;) print (&#39;沿轴 1 堆叠两个数组：&#39;) print (np.stack((a,b),1))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 堆叠两个数组：</span></span>
<span class="line"><span>[[[1 2]</span></span>
<span class="line"><span>  [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[5 6]</span></span>
<span class="line"><span>  [7 8]]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 堆叠两个数组：</span></span>
<span class="line"><span>[[[1 2]</span></span>
<span class="line"><span>  [5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> [[3 4]</span></span>
<span class="line"><span>  [7 8]]]</span></span></code></pre></div><h3 id="numpy-hstack" tabindex="-1">numpy.hstack <a class="header-anchor" href="#numpy-hstack" aria-label="Permalink to &quot;numpy.hstack&quot;">​</a></h3><p>numpy.hstack 是 numpy.stack 函数的变体，它通过水平堆叠来生成数组。</p><h2 id="实例-77" tabindex="-1">实例 <a class="header-anchor" href="#实例-77" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2],[3,4]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) b = np.array([[5,6],[7,8]]) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) print (&#39;水平堆叠：&#39;) c = np.hstack((a,b)) print (c) print (&#39;\\n&#39;)</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>水平堆叠：</span></span>
<span class="line"><span>[[1 2 5 6]</span></span>
<span class="line"><span> [3 4 7 8]]</span></span></code></pre></div><h3 id="numpy-vstack" tabindex="-1">numpy.vstack <a class="header-anchor" href="#numpy-vstack" aria-label="Permalink to &quot;numpy.vstack&quot;">​</a></h3><p>numpy.vstack 是 numpy.stack 函数的变体，它通过垂直堆叠来生成数组。</p><h2 id="实例-78" tabindex="-1">实例 <a class="header-anchor" href="#实例-78" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2],[3,4]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) b = np.array([[5,6],[7,8]]) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) print (&#39;竖直堆叠：&#39;) c = np.vstack((a,b)) print (c)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[[5 6]</span></span>
<span class="line"><span> [7 8]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>竖直堆叠：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]</span></span>
<span class="line"><span> [7 8]]</span></span></code></pre></div><hr><h2 id="分割数组" tabindex="-1">分割数组 <a class="header-anchor" href="#分割数组" aria-label="Permalink to &quot;分割数组&quot;">​</a></h2><table><thead><tr><th>函数</th><th>数组及操作</th></tr></thead><tbody><tr><td><code>split</code></td><td>将一个数组分割为多个子数组</td></tr><tr><td><code>hsplit</code></td><td>将一个数组水平分割为多个子数组（按列）</td></tr><tr><td><code>vsplit</code></td><td>将一个数组垂直分割为多个子数组（按行）</td></tr></tbody></table><h3 id="numpy-split" tabindex="-1">numpy.split <a class="header-anchor" href="#numpy-split" aria-label="Permalink to &quot;numpy.split&quot;">​</a></h3><p>numpy.split 函数沿特定的轴将数组分割为子数组，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.split(ary, indices_or_sections, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>ary</code>：被分割的数组</li><li><code>indices_or_sections</code>：如果是一个整数，就用该数平均切分，如果是一个数组，为沿轴切分的位置（左开右闭）</li><li><code>axis</code>：设置沿着哪个方向进行切分，默认为 0，横向切分，即水平方向。为 1 时，纵向切分，即竖直方向。</li></ul><h2 id="实例-79" tabindex="-1">实例 <a class="header-anchor" href="#实例-79" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(9) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;将数组分为三个大小相等的子数组：&#39;) b = np.split(a,3) print (b) print (&#39;\\n&#39;) print (&#39;将数组在一维数组中表明的位置分割：&#39;) b = np.split(a,[4,7]) print (b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[0 1 2 3 4 5 6 7 8]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>将数组分为三个大小相等的子数组：</span></span>
<span class="line"><span>[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>将数组在一维数组中表明的位置分割：</span></span>
<span class="line"><span>[array([0, 1, 2, 3]), array([4, 5, 6]), array([7, 8])]</span></span></code></pre></div><p>axis 为 0 时在水平方向分割，axis 为 1 时在垂直方向分割：</p><h2 id="实例-80" tabindex="-1">实例 <a class="header-anchor" href="#实例-80" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p><strong>import</strong> numpy <strong>as</strong> np</p><p>a = np.arange(16).reshape(4, 4) <strong>print</strong>(&#39;第一个数组：&#39;) <strong>print</strong>(a) <strong>print</strong>(&#39;<strong>\\n</strong>&#39;) <strong>print</strong>(&#39;默认分割（0轴）：&#39;) b = np.split(a,2) <strong>print</strong>(b) <strong>print</strong>(&#39;<strong>\\n</strong>&#39;)</p><p><strong>print</strong>(&#39;沿水平方向分割：&#39;) c = np.split(a,2,1) <strong>print</strong>(c) <strong>print</strong>(&#39;<strong>\\n</strong>&#39;)</p><p><strong>print</strong>(&#39;沿水平方向分割：&#39;) d= np.hsplit(a,2) <strong>print</strong>(d)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]</span></span>
<span class="line"><span> [12 13 14 15]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>默认分割（0轴）：</span></span>
<span class="line"><span>[array([[0, 1, 2, 3],</span></span>
<span class="line"><span>       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span></span>
<span class="line"><span>       [12, 13, 14, 15]])]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿水平方向分割：</span></span>
<span class="line"><span>[array([[ 0,  1],</span></span>
<span class="line"><span>       [ 4,  5],</span></span>
<span class="line"><span>       [ 8,  9],</span></span>
<span class="line"><span>       [12, 13]]), array([[ 2,  3],</span></span>
<span class="line"><span>       [ 6,  7],</span></span>
<span class="line"><span>       [10, 11],</span></span>
<span class="line"><span>       [14, 15]])]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿水平方向分割：</span></span>
<span class="line"><span>[array([[ 0,  1],</span></span>
<span class="line"><span>       [ 4,  5],</span></span>
<span class="line"><span>       [ 8,  9],</span></span>
<span class="line"><span>       [12, 13]]), array([[ 2,  3],</span></span>
<span class="line"><span>       [ 6,  7],</span></span>
<span class="line"><span>       [10, 11],</span></span>
<span class="line"><span>       [14, 15]])]</span></span></code></pre></div><h3 id="numpy-hsplit" tabindex="-1">numpy.hsplit <a class="header-anchor" href="#numpy-hsplit" aria-label="Permalink to &quot;numpy.hsplit&quot;">​</a></h3><p>numpy.hsplit 函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</p><h2 id="实例-81" tabindex="-1">实例 <a class="header-anchor" href="#实例-81" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np harr = np.floor(10 * np.random.random((2, 6))) print (&#39;原array：&#39;) print(harr) print (&#39;拆分后：&#39;) print(np.hsplit(harr, 3))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原array：</span></span>
<span class="line"><span>[[4. 7. 6. 3. 2. 6.]</span></span>
<span class="line"><span> [6. 3. 6. 7. 9. 7.]]</span></span>
<span class="line"><span>拆分后：</span></span>
<span class="line"><span>[array([[4., 7.],</span></span>
<span class="line"><span>       [6., 3.]]), array([[6., 3.],</span></span>
<span class="line"><span>       [6., 7.]]), array([[2., 6.],</span></span>
<span class="line"><span>       [9., 7.]])]</span></span></code></pre></div><h3 id="numpy-vsplit" tabindex="-1">numpy.vsplit <a class="header-anchor" href="#numpy-vsplit" aria-label="Permalink to &quot;numpy.vsplit&quot;">​</a></h3><p>numpy.vsplit 沿着垂直轴分割，其分割方式与hsplit用法相同。</p><h2 id="实例-82" tabindex="-1">实例 <a class="header-anchor" href="#实例-82" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(16).reshape(4,4) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;竖直分割：&#39;) b = np.vsplit(a,2) print (b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]</span></span>
<span class="line"><span> [12 13 14 15]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>竖直分割：</span></span>
<span class="line"><span>[array([[0, 1, 2, 3],</span></span>
<span class="line"><span>       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span></span>
<span class="line"><span>       [12, 13, 14, 15]])]</span></span></code></pre></div><hr><h2 id="数组元素的添加与删除" tabindex="-1">数组元素的添加与删除 <a class="header-anchor" href="#数组元素的添加与删除" aria-label="Permalink to &quot;数组元素的添加与删除&quot;">​</a></h2><table><thead><tr><th>函数</th><th>元素及描述</th></tr></thead><tbody><tr><td><code>resize</code></td><td>返回指定形状的新数组</td></tr><tr><td><code>append</code></td><td>将值添加到数组末尾</td></tr><tr><td><code>insert</code></td><td>沿指定轴将值插入到指定下标之前</td></tr><tr><td><code>delete</code></td><td>删掉某个轴的子数组，并返回删除后的新数组</td></tr><tr><td><code>unique</code></td><td>查找数组内的唯一元素</td></tr></tbody></table><h3 id="numpy-resize" tabindex="-1">numpy.resize <a class="header-anchor" href="#numpy-resize" aria-label="Permalink to &quot;numpy.resize&quot;">​</a></h3><p>numpy.resize 函数返回指定大小的新数组。</p><p>如果新数组大小大于原始大小，则包含原始数组中的元素的副本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.resize(arr, shape)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：要修改大小的数组</li><li><code>shape</code>：返回数组的新形状</li></ul><h2 id="实例-83" tabindex="-1">实例 <a class="header-anchor" href="#实例-83" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[4,5,6]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;第一个数组的形状：&#39;) print (a.shape) print (&#39;\\n&#39;) b = np.resize(a, (3,2)) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) print (&#39;第二个数组的形状：&#39;) print (b.shape) print (&#39;\\n&#39;) # 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了 print (&#39;修改第二个数组的大小：&#39;) b = np.resize(a,(3,3)) print (b)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [4 5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第一个数组的形状：</span></span>
<span class="line"><span>(2, 3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组的形状：</span></span>
<span class="line"><span>(3, 2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改第二个数组的大小：</span></span>
<span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [4 5 6]</span></span>
<span class="line"><span> [1 2 3]]</span></span></code></pre></div><h3 id="numpy-append" tabindex="-1">numpy.append <a class="header-anchor" href="#numpy-append" aria-label="Permalink to &quot;numpy.append&quot;">​</a></h3><p>numpy.append 函数在数组的末尾添加值。 追加操作会分配整个数组，并把原来的数组复制到新数组中。 此外，输入数组的维度必须匹配否则将生成ValueError。</p><p>append 函数返回的始终是一个一维数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.append(arr, values, axis=None)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>values</code>：要向<code>arr</code>添加的值，需要和<code>arr</code>形状相同（除了要添加的轴）</li><li><code>axis</code>：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！当axis有定义的时候，分别为0和1的时候。当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。</li></ul><h2 id="实例-84" tabindex="-1">实例 <a class="header-anchor" href="#实例-84" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[4,5,6]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;向数组添加元素：&#39;) print (np.append(a, [7,8,9])) print (&#39;\\n&#39;) print (&#39;沿轴 0 添加元素：&#39;) print (np.append(a, [[7,8,9]],axis = 0)) print (&#39;\\n&#39;) print (&#39;沿轴 1 添加元素：&#39;) print (np.append(a, [[5,5,5],[7,8,9]],axis = 1))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [4 5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>向数组添加元素：</span></span>
<span class="line"><span>[1 2 3 4 5 6 7 8 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 添加元素：</span></span>
<span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [4 5 6]</span></span>
<span class="line"><span> [7 8 9]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 添加元素：</span></span>
<span class="line"><span>[[1 2 3 5 5 5]</span></span>
<span class="line"><span> [4 5 6 7 8 9]]</span></span></code></pre></div><h3 id="numpy-insert" tabindex="-1">numpy.insert <a class="header-anchor" href="#numpy-insert" aria-label="Permalink to &quot;numpy.insert&quot;">​</a></h3><p>numpy.insert 函数在给定索引之前，沿给定轴在输入数组中插入值。</p><p>如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 此外，如果未提供轴，则输入数组会被展开。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.insert(arr, obj, values, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>obj</code>：在其之前插入值的索引</li><li><code>values</code>：要插入的值</li><li><code>axis</code>：沿着它插入的轴，如果未提供，则输入数组会被展开</li></ul><h2 id="实例-85" tabindex="-1">实例 <a class="header-anchor" href="#实例-85" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2],[3,4],[5,6]]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;未传递 Axis 参数。 在删除之前输入数组会被展开。&#39;) print (np.insert(a,3,[11,12])) print (&#39;\\n&#39;) print (&#39;传递了 Axis 参数。 会广播值数组来配输入数组。&#39;) print (&#39;沿轴 0 广播：&#39;) print (np.insert(a,1,[11],axis = 0)) print (&#39;\\n&#39;) print (&#39;沿轴 1 广播：&#39;) print (np.insert(a,1,11,axis = 1))</p><p>输出结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[1 2]</span></span>
<span class="line"><span> [3 4]</span></span>
<span class="line"><span> [5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>未传递 Axis 参数。 在删除之前输入数组会被展开。</span></span>
<span class="line"><span>[ 1  2  3 11 12  4  5  6]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>传递了 Axis 参数。 会广播值数组来配输入数组。</span></span>
<span class="line"><span>沿轴 0 广播：</span></span>
<span class="line"><span>[[ 1  2]</span></span>
<span class="line"><span> [11 11]</span></span>
<span class="line"><span> [ 3  4]</span></span>
<span class="line"><span> [ 5  6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 广播：</span></span>
<span class="line"><span>[[ 1 11  2]</span></span>
<span class="line"><span> [ 3 11  4]</span></span>
<span class="line"><span> [ 5 11  6]]</span></span></code></pre></div><h3 id="numpy-delete" tabindex="-1">numpy.delete <a class="header-anchor" href="#numpy-delete" aria-label="Permalink to &quot;numpy.delete&quot;">​</a></h3><p>numpy.delete 函数返回从输入数组中删除指定子数组的新数组。 与 insert() 函数的情况一样，如果未提供轴参数，则输入数组将展开。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Numpy.delete(arr, obj, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>obj</code>：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</li><li><code>axis</code>：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</li></ul><h2 id="实例-86" tabindex="-1">实例 <a class="header-anchor" href="#实例-86" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(12).reshape(3,4) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;未传递 Axis 参数。 在插入之前输入数组会被展开。&#39;) print (np.delete(a,5)) print (&#39;\\n&#39;) print (&#39;删除第二列：&#39;) print (np.delete(a,1,axis = 1)) print (&#39;\\n&#39;) print (&#39;包含从数组中删除的替代值的切片：&#39;) a = np.array([1,2,3,4,5,6,7,8,9,10]) print (np.delete(a, np.s_[::2]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[ 0  1  2  3]</span></span>
<span class="line"><span> [ 4  5  6  7]</span></span>
<span class="line"><span> [ 8  9 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>未传递 Axis 参数。 在插入之前输入数组会被展开。</span></span>
<span class="line"><span>[ 0  1  2  3  4  6  7  8  9 10 11]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除第二列：</span></span>
<span class="line"><span>[[ 0  2  3]</span></span>
<span class="line"><span> [ 4  6  7]</span></span>
<span class="line"><span> [ 8 10 11]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>包含从数组中删除的替代值的切片：</span></span>
<span class="line"><span>[ 2  4  6  8 10]</span></span></code></pre></div><h3 id="numpy-unique" tabindex="-1">numpy.unique <a class="header-anchor" href="#numpy-unique" aria-label="Permalink to &quot;numpy.unique&quot;">​</a></h3><p>numpy.unique 函数用于去除数组中的重复元素。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.unique(arr, return_index, return_inverse, return_counts)</span></span></code></pre></div><ul><li><code>arr</code>：输入数组，如果不是一维数组则会展开</li><li><code>return_index</code>：如果为<code>true</code>，返回新列表元素在旧列表中的位置（下标），并以列表形式储</li><li><code>return_inverse</code>：如果为<code>true</code>，返回旧列表元素在新列表中的位置（下标），并以列表形式储</li><li><code>return_counts</code>：如果为<code>true</code>，返回去重数组中的元素在原数组中的出现次数</li></ul><h2 id="实例-87" tabindex="-1">实例 <a class="header-anchor" href="#实例-87" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([5,2,6,2,7,5,6,8,2,9]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;第一个数组的去重值：&#39;) u = np.unique(a) print (u) print (&#39;\\n&#39;) print (&#39;去重数组的索引数组：&#39;) u,indices = np.unique(a, return_index = True) print (indices) print (&#39;\\n&#39;) print (&#39;我们可以看到每个和原数组下标对应的数值：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;去重数组的下标：&#39;) u,indices = np.unique(a,return_inverse = True) print (u) print (&#39;\\n&#39;) print (&#39;下标为：&#39;) print (indices) print (&#39;\\n&#39;) print (&#39;使用下标重构原数组：&#39;) print (u[indices]) print (&#39;\\n&#39;) print (&#39;返回去重元素的重复数量：&#39;) u,indices = np.unique(a,return_counts = True) print (u) print (indices)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[5 2 6 2 7 5 6 8 2 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第一个数组的去重值：</span></span>
<span class="line"><span>[2 5 6 7 8 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>去重数组的索引数组：</span></span>
<span class="line"><span>[1 0 2 4 7 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们可以看到每个和原数组下标对应的数值：</span></span>
<span class="line"><span>[5 2 6 2 7 5 6 8 2 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>去重数组的下标：</span></span>
<span class="line"><span>[2 5 6 7 8 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>下标为：</span></span>
<span class="line"><span>[1 0 2 0 3 1 2 4 0 5]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用下标重构原数组：</span></span>
<span class="line"><span>[5 2 6 2 7 5 6 8 2 9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>返回去重元素的重复数量：</span></span>
<span class="line"><span>[2 5 6 7 8 9]</span></span>
<span class="line"><span>[3 2 2 1 1 1]</span></span></code></pre></div><h1 id="numpy-位运算" tabindex="-1">NumPy 位运算 <a class="header-anchor" href="#numpy-位运算" aria-label="Permalink to &quot;NumPy 位运算&quot;">​</a></h1><p>位运算是一种在二进制数字的位级别上进行操作的一类运算，它们直接操作二进制数字的各个位，而不考虑数字的整体值。</p><p>位运算在计算机科学中广泛应用于优化和处理底层数据。</p><p>NumPy <strong>&quot;bitwise_&quot;</strong> 开头的函数是位运算函数。</p><p>NumPy 位运算包括以下几个函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>bitwise_and</code></td><td>按位与，对数组元素执行位与操作</td></tr><tr><td><code>bitwise_or</code></td><td>按位或，对数组元素执行位或操作</td></tr><tr><td><code>bitwise_xor</code></td><td>按位异或</td></tr><tr><td><code>bitwise_not</code></td><td>按位取反</td></tr><tr><td><code>invert</code></td><td>按位取反</td></tr><tr><td><code>left_shift</code></td><td>左移位运算，向左移动二进制表示的位</td></tr><tr><td><code>right_shift</code></td><td>右移位运算，向右移动二进制表示的位</td></tr></tbody></table><h2 id="实例-88" tabindex="-1">实例 <a class="header-anchor" href="#实例-88" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p><strong>import</strong> numpy <strong>as</strong> np</p><p>arr1 = np.array([True, False, True], dtype=bool) arr2 = np.array([False, True, False], dtype=bool)</p><p>result_and = np.bitwise_and(arr1, arr2) result_or = np.bitwise_or(arr1, arr2) result_xor = np.bitwise_xor(arr1, arr2) result_not = np.bitwise_not(arr1)</p><p><strong>print</strong>(&quot;AND:&quot;, result_and) # [False, False, False] <strong>print</strong>(&quot;OR:&quot;, result_or) # [True, True, True] <strong>print</strong>(&quot;XOR:&quot;, result_xor) # [True, True, True] <strong>print</strong>(&quot;NOT:&quot;, result_not) # [False, True, False]</p><p># 按位取反 arr_invert = np.invert(np.array([1, 2], dtype=np.int8)) <strong>print</strong>(&quot;Invert:&quot;, arr_invert) # [-2, -3]</p><p># 左移位运算 arr_left_shift = np.left_shift(5, 2) <strong>print</strong>(&quot;Left Shift:&quot;, arr_left_shift) # 20</p><p># 右移位运算 arr_right_shift = np.right_shift(10, 1) <strong>print</strong>(&quot;Right Shift:&quot;, arr_right_shift) # 5</p><p>也可以使用 <strong>&quot;&amp;&quot;、 &quot;~&quot;、 &quot;|&quot; 和 &quot;^&quot;</strong> 等操作符进行计算：</p><ol><li><p><strong>与运算（&amp;）：</strong> 对应位上的两个数字都为1时，结果为1；否则，结果为0。</p><p>例如：1010 &amp; 1100 = 1000</p></li><li><p><strong>或运算（|）：</strong> 对应位上的两个数字有一个为1时，结果为1；否则，结果为0。</p><p>例如：1010 | 1100 = 1110</p></li><li><p><strong>异或运算（^）：</strong> 对应位上的两个数字相异时，结果为1；相同时，结果为0。</p><p>例如：1010 ^ 1100 = 0110</p></li><li><p><strong>取反运算（~）：</strong> 对数字的每个位取反，即0变为1，1变为0。</p><p>例如：~1010 = 0101</p></li><li><p><strong>左移运算（&lt;&lt;）：</strong> 将数字的所有位向左移动指定的位数，右侧用0填充。</p><p>例如：1010 &lt;&lt; 2 = 101000</p></li><li><p><strong>右移运算（&gt;&gt;）：</strong> 将数字的所有位向右移动指定的位数，左侧根据符号位或补零。</p><p>例如：1010 &gt;&gt; 2 = 0010</p></li></ol><h3 id="bitwise-and" tabindex="-1">bitwise_and <a class="header-anchor" href="#bitwise-and" aria-label="Permalink to &quot;bitwise_and&quot;">​</a></h3><p>bitwise_and() 函数对数组中整数的二进制形式执行位与运算。</p><h2 id="实例-89" tabindex="-1">实例 <a class="header-anchor" href="#实例-89" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (&#39;13 和 17 的二进制形式：&#39;) a,b = 13,17 print (bin(a), bin(b)) print (&#39;\\n&#39;) print (&#39;13 和 17 的位与：&#39;) print (np.bitwise_and(13, 17))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>13 和 17 的二进制形式：</span></span>
<span class="line"><span>0b1101 0b10001</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>13 和 17 的位与：</span></span>
<span class="line"><span>1</span></span></code></pre></div><p>以上实例可以用下表来说明：</p><table><thead><tr><th></th><th></th><th>1</th><th>1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>AND</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>运算结果</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>位与操作运算规律如下：</p><table><thead><tr><th>A</th><th>B</th><th>AND</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h3 id="bitwise-or" tabindex="-1">bitwise_or <a class="header-anchor" href="#bitwise-or" aria-label="Permalink to &quot;bitwise_or&quot;">​</a></h3><p>bitwise_or()函数对数组中整数的二进制形式执行位或运算。</p><h2 id="实例-90" tabindex="-1">实例 <a class="header-anchor" href="#实例-90" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a,b = 13,17 print (&#39;13 和 17 的二进制形式：&#39;) print (bin(a), bin(b)) print (&#39;13 和 17 的位或：&#39;) print (np.bitwise_or(13, 17))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>13 和 17 的二进制形式：</span></span>
<span class="line"><span>0b1101 0b10001</span></span>
<span class="line"><span>13 和 17 的位或：</span></span>
<span class="line"><span>29</span></span></code></pre></div><p>以上实例可以用下表来说明：</p><table><thead><tr><th></th><th></th><th>1</th><th>1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>OR</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>运算结果</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>位或操作运算规律如下：</p><table><thead><tr><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">OR</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><h3 id="invert" tabindex="-1">invert <a class="header-anchor" href="#invert" aria-label="Permalink to &quot;invert&quot;">​</a></h3><p>invert() 函数对数组中整数进行位取反运算，即 0 变成 1，1 变成 0。</p><p>对于有符号整数，取该二进制数的补码，然后 +1。二进制数，最高位为0表示正数，最高位为 1 表示负数。</p><p>看看 ~1 的计算步骤：</p><ul><li><p>将**<code>1</code>**(这里叫：原码)转二进制 ＝ <strong><code>00000001</code></strong></p></li><li><p>按位取反 ＝ <strong><code>11111110</code></strong></p></li><li><p>发现符号位(即最高位)为**<code>1</code>**(表示负数)，将除符号位之外的其他数字取反 ＝ <strong><code>10000001</code></strong></p></li><li><p>末位加1取其补码 ＝ <strong><code>10000010</code></strong></p></li><li><p>转换回十进制 ＝ <strong><code>-2</code></strong></p></li><li><table><thead><tr><th>表达式</th><th>二进制值（2 的补数）</th><th>十进制值</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td><td>5</td></tr><tr><td>~5</td><td>11111111 11111111 11111111 11111010</td><td>-6</td></tr></tbody></table></li></ul><h2 id="实例-91" tabindex="-1">实例 <a class="header-anchor" href="#实例-91" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (&#39;13 的位反转，其中 ndarray 的 dtype 是 uint8：&#39;) print (np.invert(np.array([13], dtype = np.uint8))) print (&#39;\\n&#39;) # 比较 13 和 242 的二进制表示，我们发现了位的反转 print (&#39;13 的二进制表示：&#39;) print (np.binary_repr(13, width = 8)) print (&#39;\\n&#39;) print (&#39;242 的二进制表示：&#39;) print (np.binary_repr(242, width = 8))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>13 的位反转，其中 ndarray 的 dtype 是 uint8：</span></span>
<span class="line"><span>[242]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>13 的二进制表示：</span></span>
<span class="line"><span>00001101</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>242 的二进制表示：</span></span>
<span class="line"><span>11110010</span></span></code></pre></div><h3 id="left-shift" tabindex="-1">left_shift <a class="header-anchor" href="#left-shift" aria-label="Permalink to &quot;left_shift&quot;">​</a></h3><p>left_shift() 函数将数组元素的二进制形式向左移动到指定位置，右侧附加相等数量的 0。</p><h2 id="实例-92" tabindex="-1">实例 <a class="header-anchor" href="#实例-92" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (&#39;将 10 左移两位：&#39;) print (np.left_shift(10,2)) print (&#39;\\n&#39;) print (&#39;10 的二进制表示：&#39;) print (np.binary_repr(10, width = 8)) print (&#39;\\n&#39;) print (&#39;40 的二进制表示：&#39;) print (np.binary_repr(40, width = 8)) # &#39;00001010&#39; 中的两位移动到了左边，并在右边添加了两个 0。</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>将 10 左移两位：</span></span>
<span class="line"><span>40</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>10 的二进制表示：</span></span>
<span class="line"><span>00001010</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>40 的二进制表示：</span></span>
<span class="line"><span>00101000</span></span></code></pre></div><h3 id="right-shift" tabindex="-1">right_shift <a class="header-anchor" href="#right-shift" aria-label="Permalink to &quot;right_shift&quot;">​</a></h3><p>right_shift() 函数将数组元素的二进制形式向右移动到指定位置，左侧附加相等数量的 0。</p><h2 id="实例-93" tabindex="-1">实例 <a class="header-anchor" href="#实例-93" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (&#39;将 40 右移两位：&#39;) print (np.right_shift(40,2)) print (&#39;\\n&#39;) print (&#39;40 的二进制表示：&#39;) print (np.binary_repr(40, width = 8)) print (&#39;\\n&#39;) print (&#39;10 的二进制表示：&#39;) print (np.binary_repr(10, width = 8)) # &#39;00001010&#39; 中的两位移动到了右边，并在左边添加了两个 0。</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>将 40 右移两位：</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>40 的二进制表示：</span></span>
<span class="line"><span>00101000</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>10 的二进制表示：</span></span>
<span class="line"><span>00001010</span></span></code></pre></div><h1 id="numpy-字符串函数" tabindex="-1">NumPy 字符串函数 <a class="header-anchor" href="#numpy-字符串函数" aria-label="Permalink to &quot;NumPy 字符串函数&quot;">​</a></h1><p>以下函数用于对 dtype 为 numpy.string_ 或 numpy.unicode_ 的数组执行向量化字符串操作。 它们基于 Python 内置库中的标准字符串函数。</p><p>这些函数在字符数组类（numpy.char）中定义。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>add()</code></td><td>对两个数组的逐个字符串元素进行连接</td></tr><tr><td>multiply()</td><td>返回按元素多重连接后的字符串</td></tr><tr><td><code>center()</code></td><td>居中字符串</td></tr><tr><td><code>capitalize()</code></td><td>将字符串第一个字母转换为大写</td></tr><tr><td><code>title()</code></td><td>将字符串的每个单词的第一个字母转换为大写</td></tr><tr><td><code>lower()</code></td><td>数组元素转换为小写</td></tr><tr><td><code>upper()</code></td><td>数组元素转换为大写</td></tr><tr><td><code>split()</code></td><td>指定分隔符对字符串进行分割，并返回数组列表</td></tr><tr><td><code>splitlines()</code></td><td>返回元素中的行列表，以换行符分割</td></tr><tr><td><code>strip()</code></td><td>移除元素开头或者结尾处的特定字符</td></tr><tr><td><code>join()</code></td><td>通过指定分隔符来连接数组中的元素</td></tr><tr><td><code>replace()</code></td><td>使用新字符串替换字符串中的所有子字符串</td></tr><tr><td><code>decode()</code></td><td>数组元素依次调用<code>str.decode</code></td></tr><tr><td><code>encode()</code></td><td>数组元素依次调用<code>str.encode</code></td></tr></tbody></table><h3 id="numpy-char-add" tabindex="-1">numpy.char.add() <a class="header-anchor" href="#numpy-char-add" aria-label="Permalink to &quot;numpy.char.add()&quot;">​</a></h3><p>numpy.char.add() 函数依次对两个数组的元素进行字符串连接。</p><h2 id="实例-94" tabindex="-1">实例 <a class="header-anchor" href="#实例-94" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (&#39;连接两个字符串：&#39;) print (np.char.add([&#39;hello&#39;],[&#39; xyz&#39;])) print (&#39;\\n&#39;) print (&#39;连接示例：&#39;) print (np.char.add([&#39;hello&#39;, &#39;hi&#39;],[&#39; abc&#39;, &#39; xyz&#39;]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>连接两个字符串：</span></span>
<span class="line"><span>[&#39;hello xyz&#39;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>连接示例：</span></span>
<span class="line"><span>[&#39;hello abc&#39; &#39;hi xyz&#39;]</span></span></code></pre></div><h3 id="numpy-char-multiply" tabindex="-1">numpy.char.multiply() <a class="header-anchor" href="#numpy-char-multiply" aria-label="Permalink to &quot;numpy.char.multiply()&quot;">​</a></h3><p>numpy.char.multiply() 函数执行多重连接。</p><h2 id="实例-95" tabindex="-1">实例 <a class="header-anchor" href="#实例-95" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.char.multiply(&#39;Runoob &#39;,3))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Runoob Runoob Runoob</span></span></code></pre></div><h3 id="numpy-char-center" tabindex="-1">numpy.char.center() <a class="header-anchor" href="#numpy-char-center" aria-label="Permalink to &quot;numpy.char.center()&quot;">​</a></h3><p>numpy.char.center() 函数用于将字符串居中，并使用指定字符在左侧和右侧进行填充。</p><h2 id="实例-96" tabindex="-1">实例 <a class="header-anchor" href="#实例-96" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # np.char.center(str , width,fillchar) ： # str: 字符串，width: 长度，fillchar: 填充字符 print (np.char.center(&#39;Runoob&#39;, 20,fillchar = &#39;*&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>*******Runoob*******</span></span></code></pre></div><h3 id="numpy-char-capitalize" tabindex="-1">numpy.char.capitalize() <a class="header-anchor" href="#numpy-char-capitalize" aria-label="Permalink to &quot;numpy.char.capitalize()&quot;">​</a></h3><p>numpy.char.capitalize() 函数将字符串的第一个字母转换为大写：</p><h2 id="实例-97" tabindex="-1">实例 <a class="header-anchor" href="#实例-97" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.char.capitalize(&#39;runoob&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Runoob</span></span></code></pre></div><h3 id="numpy-char-title" tabindex="-1">numpy.char.title() <a class="header-anchor" href="#numpy-char-title" aria-label="Permalink to &quot;numpy.char.title()&quot;">​</a></h3><p>numpy.char.title() 函数将字符串的每个单词的第一个字母转换为大写：</p><h2 id="实例-98" tabindex="-1">实例 <a class="header-anchor" href="#实例-98" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.char.title(&#39;i like runoob&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>I Like Runoob</span></span></code></pre></div><h3 id="numpy-char-lower" tabindex="-1">numpy.char.lower() <a class="header-anchor" href="#numpy-char-lower" aria-label="Permalink to &quot;numpy.char.lower()&quot;">​</a></h3><p>numpy.char.lower() 函数对数组的每个元素转换为小写。它对每个元素调用 str.lower。</p><h2 id="实例-99" tabindex="-1">实例 <a class="header-anchor" href="#实例-99" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np #操作数组 print (np.char.lower([&#39;RUNOOB&#39;,&#39;GOOGLE&#39;])) # 操作字符串 print (np.char.lower(&#39;RUNOOB&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[&#39;runoob&#39; &#39;google&#39;]</span></span>
<span class="line"><span>runoob</span></span></code></pre></div><h3 id="numpy-char-upper" tabindex="-1">numpy.char.upper() <a class="header-anchor" href="#numpy-char-upper" aria-label="Permalink to &quot;numpy.char.upper()&quot;">​</a></h3><p>numpy.char.upper() 函数对数组的每个元素转换为大写。它对每个元素调用 str.upper。</p><h2 id="实例-100" tabindex="-1">实例 <a class="header-anchor" href="#实例-100" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np #操作数组 print (np.char.upper([&#39;runoob&#39;,&#39;google&#39;])) # 操作字符串 print (np.char.upper(&#39;runoob&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[&#39;RUNOOB&#39; &#39;GOOGLE&#39;]</span></span>
<span class="line"><span>RUNOOB</span></span></code></pre></div><h3 id="numpy-char-split" tabindex="-1">numpy.char.split() <a class="header-anchor" href="#numpy-char-split" aria-label="Permalink to &quot;numpy.char.split()&quot;">​</a></h3><p>numpy.char.split() 通过指定分隔符对字符串进行分割，并返回数组。默认情况下，分隔符为空格。</p><h2 id="实例-101" tabindex="-1">实例 <a class="header-anchor" href="#实例-101" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 分隔符默认为空格 print (np.char.split (&#39;i like runoob?&#39;)) # 分隔符为 . print (np.char.split (&#39;www.runoob.com&#39;, sep = &#39;.&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[&#39;i&#39;, &#39;like&#39;, &#39;runoob?&#39;]</span></span>
<span class="line"><span>[&#39;www&#39;, &#39;runoob&#39;, &#39;com&#39;]</span></span></code></pre></div><h3 id="numpy-char-splitlines" tabindex="-1">numpy.char.splitlines() <a class="header-anchor" href="#numpy-char-splitlines" aria-label="Permalink to &quot;numpy.char.splitlines()&quot;">​</a></h3><p>numpy.char.splitlines() 函数以换行符作为分隔符来分割字符串，并返回数组。</p><h2 id="实例-102" tabindex="-1">实例 <a class="header-anchor" href="#实例-102" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 换行符 \\n print (np.char.splitlines(&#39;i\\nlike runoob?&#39;)) print (np.char.splitlines(&#39;i\\rlike runoob?&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[&#39;i&#39;, &#39;like runoob?&#39;]</span></span>
<span class="line"><span>[&#39;i&#39;, &#39;like runoob?&#39;]</span></span></code></pre></div><p>\\n，\\r，\\r\\n 都可用作换行符。</p><h3 id="numpy-char-strip" tabindex="-1">numpy.char.strip() <a class="header-anchor" href="#numpy-char-strip" aria-label="Permalink to &quot;numpy.char.strip()&quot;">​</a></h3><p>numpy.char.strip() 函数用于移除开头或结尾处的特定字符。</p><h2 id="实例-103" tabindex="-1">实例 <a class="header-anchor" href="#实例-103" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 移除字符串头尾的 a 字符 print (np.char.strip(&#39;ashok arunooba&#39;,&#39;a&#39;)) # 移除数组元素头尾的 a 字符 print (np.char.strip([&#39;arunooba&#39;,&#39;admin&#39;,&#39;java&#39;],&#39;a&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>shok arunoob</span></span>
<span class="line"><span>[&#39;runoob&#39; &#39;dmin&#39; &#39;jav&#39;]</span></span></code></pre></div><h3 id="numpy-char-join" tabindex="-1">numpy.char.join() <a class="header-anchor" href="#numpy-char-join" aria-label="Permalink to &quot;numpy.char.join()&quot;">​</a></h3><p>numpy.char.join() 函数通过指定分隔符来连接数组中的元素或字符串</p><h2 id="实例-104" tabindex="-1">实例 <a class="header-anchor" href="#实例-104" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 操作字符串 print (np.char.join(&#39;:&#39;,&#39;runoob&#39;)) # 指定多个分隔符操作数组元素 print (np.char.join([&#39;:&#39;,&#39;-&#39;],[&#39;runoob&#39;,&#39;google&#39;]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>r:u:n:o:o:b</span></span>
<span class="line"><span>[&#39;r:u:n:o:o:b&#39; &#39;g-o-o-g-l-e&#39;]</span></span></code></pre></div><h3 id="numpy-char-replace" tabindex="-1">numpy.char.replace() <a class="header-anchor" href="#numpy-char-replace" aria-label="Permalink to &quot;numpy.char.replace()&quot;">​</a></h3><p>numpy.char.replace() 函数使用新字符串替换字符串中的所有子字符串。</p><h2 id="实例-105" tabindex="-1">实例 <a class="header-anchor" href="#实例-105" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.char.replace (&#39;i like runoob&#39;, &#39;oo&#39;, &#39;cc&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>i like runccb</span></span></code></pre></div><h3 id="numpy-char-encode" tabindex="-1">numpy.char.encode() <a class="header-anchor" href="#numpy-char-encode" aria-label="Permalink to &quot;numpy.char.encode()&quot;">​</a></h3><p>numpy.char.encode() 函数对数组中的每个元素调用 str.encode 函数。 默认编码是 utf-8，可以使用标准 Python 库中的编解码器。</p><h2 id="实例-106" tabindex="-1">实例 <a class="header-anchor" href="#实例-106" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.char.encode(&#39;runoob&#39;, &#39;cp500&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>b&#39;\\x99\\xa4\\x95\\x96\\x96\\x82&#39;</span></span></code></pre></div><h3 id="numpy-char-decode" tabindex="-1">numpy.char.decode() <a class="header-anchor" href="#numpy-char-decode" aria-label="Permalink to &quot;numpy.char.decode()&quot;">​</a></h3><p>numpy.char.decode() 函数对编码的元素进行 str.decode() 解码。</p><h2 id="实例-107" tabindex="-1">实例 <a class="header-anchor" href="#实例-107" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.char.encode(&#39;runoob&#39;, &#39;cp500&#39;) print (a) print (np.char.decode(a,&#39;cp500&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>b&#39;\\x99\\xa4\\x95\\x96\\x96\\x82&#39;</span></span>
<span class="line"><span>runoob</span></span></code></pre></div><h1 id="numpy-数学函数" tabindex="-1">NumPy 数学函数 <a class="header-anchor" href="#numpy-数学函数" aria-label="Permalink to &quot;NumPy 数学函数&quot;">​</a></h1><p>NumPy 包含大量的各种数学运算的函数，包括三角函数，算术运算的函数，复数处理函数等。</p><h3 id="三角函数" tabindex="-1">三角函数 <a class="header-anchor" href="#三角函数" aria-label="Permalink to &quot;三角函数&quot;">​</a></h3><p>NumPy 提供了标准的三角函数：sin()、cos()、tan()。</p><h2 id="实例-108" tabindex="-1">实例 <a class="header-anchor" href="#实例-108" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([0,30,45,60,90]) print (&#39;不同角度的正弦值：&#39;) # 通过乘 pi/180 转化为弧度 print (np.sin(a<em>np.pi/180)) print (&#39;\\n&#39;) print (&#39;数组中角度的余弦值：&#39;) print (np.cos(a</em>np.pi/180)) print (&#39;\\n&#39;) print (&#39;数组中角度的正切值：&#39;) print (np.tan(a*np.pi/180))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>不同角度的正弦值：</span></span>
<span class="line"><span>[0.         0.5        0.70710678 0.8660254  1.        ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组中角度的余弦值：</span></span>
<span class="line"><span>[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01</span></span>
<span class="line"><span> 6.12323400e-17]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组中角度的正切值：</span></span>
<span class="line"><span>[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00</span></span>
<span class="line"><span> 1.63312394e+16]</span></span></code></pre></div><p>arcsin，arccos，和 arctan 函数返回给定角度的 sin，cos 和 tan 的反三角函数。</p><p>这些函数的结果可以通过 numpy.degrees() 函数将弧度转换为角度。</p><h2 id="实例-109" tabindex="-1">实例 <a class="header-anchor" href="#实例-109" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([0,30,45,60,90]) print (&#39;含有正弦值的数组：&#39;) sin = np.sin(a<em>np.pi/180) print (sin) print (&#39;\\n&#39;) print (&#39;计算角度的反正弦，返回值以弧度为单位：&#39;) inv = np.arcsin(sin) print (inv) print (&#39;\\n&#39;) print (&#39;通过转化为角度制来检查结果：&#39;) print (np.degrees(inv)) print (&#39;\\n&#39;) print (&#39;arccos 和 arctan 函数行为类似：&#39;) cos = np.cos(a</em>np.pi/180) print (cos) print (&#39;\\n&#39;) print (&#39;反余弦：&#39;) inv = np.arccos(cos) print (inv) print (&#39;\\n&#39;) print (&#39;角度制单位：&#39;) print (np.degrees(inv)) print (&#39;\\n&#39;) print (&#39;tan 函数：&#39;) tan = np.tan(a*np.pi/180) print (tan) print (&#39;\\n&#39;) print (&#39;反正切：&#39;) inv = np.arctan(tan) print (inv) print (&#39;\\n&#39;) print (&#39;角度制单位：&#39;) print (np.degrees(inv))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>含有正弦值的数组：</span></span>
<span class="line"><span>[0.         0.5        0.70710678 0.8660254  1.        ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>计算角度的反正弦，返回值以弧度为单位：</span></span>
<span class="line"><span>[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>通过转化为角度制来检查结果：</span></span>
<span class="line"><span>[ 0. 30. 45. 60. 90.]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>arccos 和 arctan 函数行为类似：</span></span>
<span class="line"><span>[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01</span></span>
<span class="line"><span> 6.12323400e-17]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>反余弦：</span></span>
<span class="line"><span>[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>角度制单位：</span></span>
<span class="line"><span>[ 0. 30. 45. 60. 90.]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>tan 函数：</span></span>
<span class="line"><span>[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00</span></span>
<span class="line"><span> 1.63312394e+16]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>反正切：</span></span>
<span class="line"><span>[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>角度制单位：</span></span>
<span class="line"><span>[ 0. 30. 45. 60. 90.]</span></span></code></pre></div><h3 id="舍入函数" tabindex="-1">舍入函数 <a class="header-anchor" href="#舍入函数" aria-label="Permalink to &quot;舍入函数&quot;">​</a></h3><p>numpy.around() 函数返回指定数字的四舍五入值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.around(a,decimals)</span></span></code></pre></div><p>参数说明：</p><ul><li>a: 数组</li><li>decimals: 舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置</li></ul><h2 id="实例-110" tabindex="-1">实例 <a class="header-anchor" href="#实例-110" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([1.0,5.55, 123, 0.567, 25.532]) print (&#39;原数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;舍入后：&#39;) print (np.around(a)) print (np.around(a, decimals = 1)) print (np.around(a, decimals = -1))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>原数组：</span></span>
<span class="line"><span>[  1.      5.55  123.      0.567  25.532]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>舍入后：</span></span>
<span class="line"><span>[  1.   6. 123.   1.  26.]</span></span>
<span class="line"><span>[  1.    5.6 123.    0.6  25.5]</span></span>
<span class="line"><span>[  0.  10. 120.   0.  30.]</span></span></code></pre></div><h3 id="numpy-floor" tabindex="-1">numpy.floor() <a class="header-anchor" href="#numpy-floor" aria-label="Permalink to &quot;numpy.floor()&quot;">​</a></h3><p>numpy.floor() 返回小于或者等于指定表达式的最大整数，即向下取整。</p><h2 id="实例-111" tabindex="-1">实例 <a class="header-anchor" href="#实例-111" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([-1.7, 1.5, -0.2, 0.6, 10]) print (&#39;提供的数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;修改后的数组：&#39;) print (np.floor(a))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>提供的数组：</span></span>
<span class="line"><span>[-1.7  1.5 -0.2  0.6 10. ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组：</span></span>
<span class="line"><span>[-2.  1. -1.  0. 10.]</span></span></code></pre></div><h3 id="numpy-ceil" tabindex="-1">numpy.ceil() <a class="header-anchor" href="#numpy-ceil" aria-label="Permalink to &quot;numpy.ceil()&quot;">​</a></h3><p>numpy.ceil() 返回大于或者等于指定表达式的最小整数，即向上取整。</p><h2 id="实例-112" tabindex="-1">实例 <a class="header-anchor" href="#实例-112" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([-1.7, 1.5, -0.2, 0.6, 10]) print (&#39;提供的数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;修改后的数组：&#39;) print (np.ceil(a))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>提供的数组：</span></span>
<span class="line"><span>[-1.7  1.5 -0.2  0.6 10. ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组：</span></span>
<span class="line"><span>[-1.  2. -0.  1. 10.]</span></span></code></pre></div><h1 id="numpy-算术函数" tabindex="-1">NumPy 算术函数 <a class="header-anchor" href="#numpy-算术函数" aria-label="Permalink to &quot;NumPy 算术函数&quot;">​</a></h1><p>NumPy 算术函数包含简单的加减乘除: <strong>add()</strong>，<strong>subtract()</strong>，<strong>multiply()</strong> 和 <strong>divide()</strong>。</p><p>需要注意的是数组必须具有相同的形状或符合数组广播规则。</p><h2 id="实例-113" tabindex="-1">实例 <a class="header-anchor" href="#实例-113" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(9, dtype = np.float_).reshape(3,3) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;第二个数组：&#39;) b = np.array([10,10,10]) print (b) print (&#39;\\n&#39;) print (&#39;两个数组相加：&#39;) print (np.add(a,b)) print (&#39;\\n&#39;) print (&#39;两个数组相减：&#39;) print (np.subtract(a,b)) print (&#39;\\n&#39;) print (&#39;两个数组相乘：&#39;) print (np.multiply(a,b)) print (&#39;\\n&#39;) print (&#39;两个数组相除：&#39;) print (np.divide(a,b))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[[0. 1. 2.]</span></span>
<span class="line"><span> [3. 4. 5.]</span></span>
<span class="line"><span> [6. 7. 8.]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[10 10 10]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>两个数组相加：</span></span>
<span class="line"><span>[[10. 11. 12.]</span></span>
<span class="line"><span> [13. 14. 15.]</span></span>
<span class="line"><span> [16. 17. 18.]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>两个数组相减：</span></span>
<span class="line"><span>[[-10.  -9.  -8.]</span></span>
<span class="line"><span> [ -7.  -6.  -5.]</span></span>
<span class="line"><span> [ -4.  -3.  -2.]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>两个数组相乘：</span></span>
<span class="line"><span>[[ 0. 10. 20.]</span></span>
<span class="line"><span> [30. 40. 50.]</span></span>
<span class="line"><span> [60. 70. 80.]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>两个数组相除：</span></span>
<span class="line"><span>[[0.  0.1 0.2]</span></span>
<span class="line"><span> [0.3 0.4 0.5]</span></span>
<span class="line"><span> [0.6 0.7 0.8]]</span></span></code></pre></div><p>此外 Numpy 也包含了其他重要的算术函数。</p><h3 id="numpy-reciprocal" tabindex="-1">numpy.reciprocal() <a class="header-anchor" href="#numpy-reciprocal" aria-label="Permalink to &quot;numpy.reciprocal()&quot;">​</a></h3><p>numpy.reciprocal() 函数返回参数逐元素的倒数。如 <strong>1/4</strong> 倒数为 <strong>4/1</strong>。</p><h2 id="实例-114" tabindex="-1">实例 <a class="header-anchor" href="#实例-114" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([0.25, 1.33, 1, 100]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 reciprocal 函数：&#39;) print (np.reciprocal(a))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[  0.25   1.33   1.   100.  ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 reciprocal 函数：</span></span>
<span class="line"><span>[4.        0.7518797 1.        0.01     ]</span></span></code></pre></div><h3 id="numpy-power" tabindex="-1">numpy.power() <a class="header-anchor" href="#numpy-power" aria-label="Permalink to &quot;numpy.power()&quot;">​</a></h3><p>numpy.power() 函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂。</p><h2 id="实例-115" tabindex="-1">实例 <a class="header-anchor" href="#实例-115" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([10,100,1000]) print (&#39;我们的数组是；&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 power 函数：&#39;) print (np.power(a,2)) print (&#39;\\n&#39;) print (&#39;第二个数组：&#39;) b = np.array([1,2,3]) print (b) print (&#39;\\n&#39;) print (&#39;再次调用 power 函数：&#39;) print (np.power(a,b))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是；</span></span>
<span class="line"><span>[  10  100 1000]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 power 函数：</span></span>
<span class="line"><span>[    100   10000 1000000]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[1 2 3]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>再次调用 power 函数：</span></span>
<span class="line"><span>[        10      10000 1000000000]</span></span></code></pre></div><h3 id="numpy-mod" tabindex="-1">numpy.mod() <a class="header-anchor" href="#numpy-mod" aria-label="Permalink to &quot;numpy.mod()&quot;">​</a></h3><p>numpy.mod() 计算输入数组中相应元素的相除后的余数。 函数 numpy.remainder() 也产生相同的结果。</p><h2 id="实例-116" tabindex="-1">实例 <a class="header-anchor" href="#实例-116" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([10,20,30]) b = np.array([3,5,7]) print (&#39;第一个数组：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;第二个数组：&#39;) print (b) print (&#39;\\n&#39;) print (&#39;调用 mod() 函数：&#39;) print (np.mod(a,b)) print (&#39;\\n&#39;) print (&#39;调用 remainder() 函数：&#39;) print (np.remainder(a,b))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一个数组：</span></span>
<span class="line"><span>[10 20 30]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二个数组：</span></span>
<span class="line"><span>[3 5 7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 mod() 函数：</span></span>
<span class="line"><span>[1 0 2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 remainder() 函数：</span></span>
<span class="line"><span>[1 0 2]</span></span></code></pre></div><h1 id="numpy-统计函数" tabindex="-1">NumPy 统计函数 <a class="header-anchor" href="#numpy-统计函数" aria-label="Permalink to &quot;NumPy 统计函数&quot;">​</a></h1><p>NumPy 提供了很多统计函数，用于从数组中查找最小元素，最大元素，百分位标准差和方差等。</p><h3 id="numpy-amin-和-numpy-amax" tabindex="-1">numpy.amin() 和 numpy.amax() <a class="header-anchor" href="#numpy-amin-和-numpy-amax" aria-label="Permalink to &quot;numpy.amin() 和 numpy.amax()&quot;">​</a></h3><p>numpy.amin() 用于计算数组中的元素沿指定轴的最小值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.amin(a, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个NumPy数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算最小值。如果不提供此参数，则返回整个数组的最小值。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>out</code>: 可选参数，用于指定结果的存储位置。</li><li><code>keepdims</code>: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），则会去除计算后维度为1的轴。</li><li><code>initial</code>: 可选参数，用于指定一个初始值，然后在数组的元素上计算最小值。</li><li><code>where</code>: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。</li></ul><p>numpy.amax() 用于计算数组中的元素沿指定轴的最大值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.amax(a, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个NumPy数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算最大值。如果不提供此参数，则返回整个数组的最大值。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>out</code>: 可选参数，用于指定结果的存储位置。</li><li><code>keepdims</code>: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），则会去除计算后维度为1的轴。</li><li><code>initial</code>: 可选参数，用于指定一个初始值，然后在数组的元素上计算最大值。</li><li><code>where</code>: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。</li></ul><h2 id="实例-117" tabindex="-1">实例 <a class="header-anchor" href="#实例-117" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[3,7,5],[8,4,3],[2,4,9]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 amin() 函数：&#39;) print (np.amin(a,1)) print (&#39;\\n&#39;) print (&#39;再次调用 amin() 函数：&#39;) print (np.amin(a,0)) print (&#39;\\n&#39;) print (&#39;调用 amax() 函数：&#39;) print (np.amax(a)) print (&#39;\\n&#39;) print (&#39;再次调用 amax() 函数：&#39;) print (np.amax(a, axis = 0))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[3 7 5]</span></span>
<span class="line"><span> [8 4 3]</span></span>
<span class="line"><span> [2 4 9]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 amin() 函数：</span></span>
<span class="line"><span>[3 3 2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>再次调用 amin() 函数：</span></span>
<span class="line"><span>[2 4 3]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 amax() 函数：</span></span>
<span class="line"><span>9</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>再次调用 amax() 函数：</span></span>
<span class="line"><span>[8 7 9]</span></span></code></pre></div><h3 id="numpy-ptp" tabindex="-1">numpy.ptp() <a class="header-anchor" href="#numpy-ptp" aria-label="Permalink to &quot;numpy.ptp()&quot;">​</a></h3><p><strong>numpy.ptp()</strong> 函数计算数组中元素最大值与最小值的差（最大值 - 最小值）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.ptp(a, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算峰-峰值。如果不提供此参数，则返回整个数组的峰-峰值。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>out</code>: 可选参数，用于指定结果的存储位置。</li><li><code>keepdims</code>: 可选参数，如果为 True，将保持结果数组的维度数目与输入数组相同。如果为 False（默认值），则会去除计算后维度为1的轴。</li><li><code>initial</code>: 可选参数，用于指定一个初始值，然后在数组的元素上计算峰-峰值。</li><li><code>where</code>: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。</li></ul><h2 id="实例-118" tabindex="-1">实例 <a class="header-anchor" href="#实例-118" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[3,7,5],[8,4,3],[2,4,9]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 ptp() 函数：&#39;) print (np.ptp(a)) print (&#39;\\n&#39;) print (&#39;沿轴 1 调用 ptp() 函数：&#39;) print (np.ptp(a, axis = 1)) print (&#39;\\n&#39;) print (&#39;沿轴 0 调用 ptp() 函数：&#39;) print (np.ptp(a, axis = 0))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[3 7 5]</span></span>
<span class="line"><span> [8 4 3]</span></span>
<span class="line"><span> [2 4 9]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 ptp() 函数：</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 调用 ptp() 函数：</span></span>
<span class="line"><span>[4 5 7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 调用 ptp() 函数：</span></span>
<span class="line"><span>[6 3 6]</span></span></code></pre></div><h3 id="numpy-percentile" tabindex="-1">numpy.percentile() <a class="header-anchor" href="#numpy-percentile" aria-label="Permalink to &quot;numpy.percentile()&quot;">​</a></h3><p>百分位数是统计中使用的度量，表示小于这个值的观察值的百分比。 函数numpy.percentile()接受以下参数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.percentile(a, q, axis)</span></span></code></pre></div><p>参数说明：</p><ul><li>a: 输入数组</li><li>q: 要计算的百分位数，在 0 ~ 100 之间</li><li>axis: 沿着它计算百分位数的轴</li></ul><p><strong>首先明确百分位数：</strong></p><p>第 p 个百分位数是这样一个值，它使得至少有 p% 的数据项小于或等于这个值，且至少有 (100-p)% 的数据项大于或等于这个值。</p><p>举个例子：高等院校的入学考试成绩经常以百分位数的形式报告。比如，假设某个考生在入学考试中的语文部分的原始分数为 54 分。相对于参加同一考试的其他学生来说，他的成绩如何并不容易知道。但是如果原始分数54分恰好对应的是第70百分位数，我们就能知道大约70%的学生的考分比他低，而约30%的学生考分比他高。</p><p>这里的 p = 70。</p><h2 id="实例-119" tabindex="-1">实例 <a class="header-anchor" href="#实例-119" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[10, 7, 4], [3, 2, 1]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;调用 percentile() 函数：&#39;) # 50% 的分位数，就是 a 里排序之后的中位数 print (np.percentile(a, 50)) # axis 为 0，在纵列上求 print (np.percentile(a, 50, axis=0)) # axis 为 1，在横行上求 print (np.percentile(a, 50, axis=1)) # 保持维度不变 print (np.percentile(a, 50, axis=1, keepdims=True))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[10  7  4]</span></span>
<span class="line"><span> [ 3  2  1]]</span></span>
<span class="line"><span>调用 percentile() 函数：</span></span>
<span class="line"><span>3.5</span></span>
<span class="line"><span>[6.5 4.5 2.5]</span></span>
<span class="line"><span>[7. 2.]</span></span>
<span class="line"><span>[[7.]</span></span>
<span class="line"><span> [2.]]</span></span></code></pre></div><h3 id="numpy-median" tabindex="-1">numpy.median() <a class="header-anchor" href="#numpy-median" aria-label="Permalink to &quot;numpy.median()&quot;">​</a></h3><p>numpy.median() 函数用于计算数组 a 中元素的中位数（中值）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.median(a, axis=None, out=None, overwrite_input=False, keepdims=&lt;no value&gt;)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算中位数。如果不提供此参数，则计算整个数组的中位数。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>out</code>: 可选参数，用于指定结果的存储位置。</li><li><code>overwrite_input</code>: 可选参数，如果为True，则允许在计算中使用输入数组的内存。这可能会在某些情况下提高性能，但可能会修改输入数组的内容。</li><li><code>keepdims</code>: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），则会去除计算后维度为1的轴。</li></ul><h2 id="实例-120" tabindex="-1">实例 <a class="header-anchor" href="#实例-120" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[30,65,70],[80,95,10],[50,90,60]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 median() 函数：&#39;) print (np.median(a)) print (&#39;\\n&#39;) print (&#39;沿轴 0 调用 median() 函数：&#39;) print (np.median(a, axis = 0)) print (&#39;\\n&#39;) print (&#39;沿轴 1 调用 median() 函数：&#39;) print (np.median(a, axis = 1))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[30 65 70]</span></span>
<span class="line"><span> [80 95 10]</span></span>
<span class="line"><span> [50 90 60]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 median() 函数：</span></span>
<span class="line"><span>65.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 调用 median() 函数：</span></span>
<span class="line"><span>[50. 90. 60.]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 调用 median() 函数：</span></span>
<span class="line"><span>[65. 80. 60.]</span></span></code></pre></div><h3 id="numpy-mean" tabindex="-1">numpy.mean() <a class="header-anchor" href="#numpy-mean" aria-label="Permalink to &quot;numpy.mean()&quot;">​</a></h3><p>numpy.mean() 函数返回数组中元素的算术平均值，如果提供了轴，则沿其计算。</p><p>算术平均值是沿轴的元素的总和除以元素的数量。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.mean(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算平均值。如果不提供此参数，则计算整个数组的平均值。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>dtype</code>: 可选参数，用于指定输出的数据类型。如果不提供，则根据输入数据的类型选择合适的数据类型。</li><li><code>out</code>: 可选参数，用于指定结果的存储位置。</li><li><code>keepdims</code>: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），则会去除计算后维度为1的轴。</li></ul><h2 id="实例-121" tabindex="-1">实例 <a class="header-anchor" href="#实例-121" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[1,2,3],[3,4,5],[4,5,6]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 mean() 函数：&#39;) print (np.mean(a)) print (&#39;\\n&#39;) print (&#39;沿轴 0 调用 mean() 函数：&#39;) print (np.mean(a, axis = 0)) print (&#39;\\n&#39;) print (&#39;沿轴 1 调用 mean() 函数：&#39;) print (np.mean(a, axis = 1))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[1 2 3]</span></span>
<span class="line"><span> [3 4 5]</span></span>
<span class="line"><span> [4 5 6]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 mean() 函数：</span></span>
<span class="line"><span>3.6666666666666665</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 调用 mean() 函数：</span></span>
<span class="line"><span>[2.66666667 3.66666667 4.66666667]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 调用 mean() 函数：</span></span>
<span class="line"><span>[2. 4. 5.]</span></span></code></pre></div><h3 id="numpy-average" tabindex="-1">numpy.average() <a class="header-anchor" href="#numpy-average" aria-label="Permalink to &quot;numpy.average()&quot;">​</a></h3><p>numpy.average() 函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值。</p><p>该函数可以接受一个轴参数。 如果没有指定轴，则数组会被展开。</p><p>加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。</p><p>考虑数组[1,2,3,4]和相应的权重[4,3,2,1]，通过将相应元素的乘积相加，并将和除以权重的和，来计算加权平均值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>加权平均值 = (1*4+2*3+3*2+4*1)/(4+3+2+1)</span></span></code></pre></div><p>函数语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.average(a, axis=None, weights=None, returned=False)</span></span></code></pre></div><p>参数说明：</p><ul><li><code>a</code>: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。</li><li><code>axis</code>: 可选参数，用于指定在哪个轴上计算加权平均值。如果不提供此参数，则计算整个数组的加权平均值。可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。</li><li><code>weights</code>: 可选参数，用于指定对应数据点的权重。如果不提供权重数组，则默认为等权重。</li><li><code>returned</code>: 可选参数，如果为True，将同时返回加权平均值和权重总和。</li></ul><h2 id="实例-122" tabindex="-1">实例 <a class="header-anchor" href="#实例-122" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([1,2,3,4]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 average() 函数：&#39;) print (np.average(a)) print (&#39;\\n&#39;) # 不指定权重时相当于 mean 函数 wts = np.array([4,3,2,1]) print (&#39;再次调用 average() 函数：&#39;) print (np.average(a,weights = wts)) print (&#39;\\n&#39;) # 如果 returned 参数设为 true，则返回权重的和 print (&#39;权重的和：&#39;) print (np.average([1,2,3, 4],weights = [4,3,2,1], returned = True))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[1 2 3 4]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 average() 函数：</span></span>
<span class="line"><span>2.5</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>再次调用 average() 函数：</span></span>
<span class="line"><span>2.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>权重的和：</span></span>
<span class="line"><span>(2.0, 10.0)</span></span></code></pre></div><p>在多维数组中，可以指定用于计算的轴。</p><h2 id="实例-123" tabindex="-1">实例 <a class="header-anchor" href="#实例-123" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(6).reshape(3,2) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;修改后的数组：&#39;) wt = np.array([3,5]) print (np.average(a, axis = 1, weights = wt)) print (&#39;\\n&#39;) print (&#39;修改后的数组：&#39;) print (np.average(a, axis = 1, weights = wt, returned = True))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组：</span></span>
<span class="line"><span>[0.625 2.625 4.625]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改后的数组：</span></span>
<span class="line"><span>(array([0.625, 2.625, 4.625]), array([8., 8., 8.]))</span></span></code></pre></div><h3 id="标准差" tabindex="-1">标准差 <a class="header-anchor" href="#标准差" aria-label="Permalink to &quot;标准差&quot;">​</a></h3><p>标准差是一组数据平均值分散程度的一种度量。</p><p>标准差是方差的算术平方根。</p><p>标准差公式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>std = sqrt(mean((x - x.mean())**2))</span></span></code></pre></div><p>如果数组是 [1，2，3，4]，则其平均值为 2.5。 因此，差的平方是 [2.25,0.25,0.25,2.25]，并且再求其平均值的平方根除以 4，即 sqrt(5/4) ，结果为 1.1180339887498949。</p><h2 id="实例-124" tabindex="-1">实例 <a class="header-anchor" href="#实例-124" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.std([1,2,3,4]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.1180339887498949</span></span></code></pre></div><h3 id="方差" tabindex="-1">方差 <a class="header-anchor" href="#方差" aria-label="Permalink to &quot;方差&quot;">​</a></h3><p>统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数，即 mean((x - x.mean())** 2)。</p><p>换句话说，标准差是方差的平方根。</p><h2 id="实例-125" tabindex="-1">实例 <a class="header-anchor" href="#实例-125" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np print (np.var([1,2,3,4]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.25</span></span></code></pre></div><h1 id="numpy-排序、条件筛选函数" tabindex="-1">NumPy 排序、条件筛选函数 <a class="header-anchor" href="#numpy-排序、条件筛选函数" aria-label="Permalink to &quot;NumPy 排序、条件筛选函数&quot;">​</a></h1><p>NumPy 提供了多种排序的方法。 这些排序函数实现不同的排序算法，每个排序算法的特征在于执行速度，最坏情况性能，所需的工作空间和算法的稳定性。 下表显示了三种排序算法的比较。</p><table><thead><tr><th>种类</th><th>速度</th><th>最坏情况</th><th>工作空间</th><th>稳定性</th></tr></thead><tbody><tr><td><code>&#39;quicksort&#39;</code>（快速排序）</td><td>1</td><td><code>O(n^2)</code></td><td>0</td><td>否</td></tr><tr><td><code>&#39;mergesort&#39;</code>（归并排序）</td><td>2</td><td><code>O(n*log(n))</code></td><td>~n/2</td><td>是</td></tr><tr><td><code>&#39;heapsort&#39;</code>（堆排序）</td><td>3</td><td><code>O(n*log(n))</code></td><td>0</td><td>否</td></tr></tbody></table><h3 id="numpy-sort" tabindex="-1">numpy.sort() <a class="header-anchor" href="#numpy-sort" aria-label="Permalink to &quot;numpy.sort()&quot;">​</a></h3><p>numpy.sort() 函数返回输入数组的排序副本。函数格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numpy.sort(a, axis, kind, order)</span></span></code></pre></div><p>参数说明：</p><ul><li>a: 要排序的数组</li><li>axis: 沿着它排序数组的轴，如果没有数组会被展开，沿着最后的轴排序， axis=0 按列排序，axis=1 按行排序</li><li>kind: 默认为&#39;quicksort&#39;（快速排序）</li><li>order: 如果数组包含字段，则是要排序的字段</li></ul><h2 id="实例-126" tabindex="-1">实例 <a class="header-anchor" href="#实例-126" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[3,7],[9,1]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 sort() 函数：&#39;) print (np.sort(a)) print (&#39;\\n&#39;) print (&#39;按列排序：&#39;) print (np.sort(a, axis = 0)) print (&#39;\\n&#39;) # 在 sort 函数中排序字段 dt = np.dtype([(&#39;name&#39;, &#39;S10&#39;),(&#39;age&#39;, int)]) a = np.array([(&quot;raju&quot;,21),(&quot;anil&quot;,25),(&quot;ravi&quot;, 17), (&quot;amar&quot;,27)], dtype = dt) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;按 name 排序：&#39;) print (np.sort(a, order = &#39;name&#39;))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[3 7]</span></span>
<span class="line"><span> [9 1]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 sort() 函数：</span></span>
<span class="line"><span>[[3 7]</span></span>
<span class="line"><span> [1 9]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>按列排序：</span></span>
<span class="line"><span>[[3 1]</span></span>
<span class="line"><span> [9 7]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[(b&#39;raju&#39;, 21) (b&#39;anil&#39;, 25) (b&#39;ravi&#39;, 17) (b&#39;amar&#39;, 27)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>按 name 排序：</span></span>
<span class="line"><span>[(b&#39;amar&#39;, 27) (b&#39;anil&#39;, 25) (b&#39;raju&#39;, 21) (b&#39;ravi&#39;, 17)]</span></span></code></pre></div><h3 id="numpy-argsort" tabindex="-1">numpy.argsort() <a class="header-anchor" href="#numpy-argsort" aria-label="Permalink to &quot;numpy.argsort()&quot;">​</a></h3><p>numpy.argsort() 函数返回的是数组值从小到大的索引值。</p><h2 id="实例-127" tabindex="-1">实例 <a class="header-anchor" href="#实例-127" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.array([3, 1, 2]) print (&#39;我们的数组是：&#39;) print (x) print (&#39;\\n&#39;) print (&#39;对 x 调用 argsort() 函数：&#39;) y = np.argsort(x) print (y) print (&#39;\\n&#39;) print (&#39;以排序后的顺序重构原数组：&#39;) print (x[y]) print (&#39;\\n&#39;) print (&#39;使用循环重构原数组：&#39;) for i in y: print (x[i], end=&quot; &quot;)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[3 1 2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>对 x 调用 argsort() 函数：</span></span>
<span class="line"><span>[1 2 0]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>以排序后的顺序重构原数组：</span></span>
<span class="line"><span>[1 2 3]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用循环重构原数组</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1 2 3</span></span></code></pre></div><h3 id="numpy-lexsort" tabindex="-1">numpy.lexsort() <a class="header-anchor" href="#numpy-lexsort" aria-label="Permalink to &quot;numpy.lexsort()&quot;">​</a></h3><p>numpy.lexsort() 用于对多个序列进行排序。把它想象成对电子表格进行排序，每一列代表一个序列，排序时优先照顾靠后的列。</p><p>这里举一个应用场景：小升初考试，重点班录取学生按照总成绩录取。在总成绩相同时，数学成绩高的优先录取，在总成绩和数学成绩都相同时，按照英语成绩录取…… 这里，总成绩排在电子表格的最后一列，数学成绩在倒数第二列，英语成绩在倒数第三列。</p><h2 id="实例-128" tabindex="-1">实例 <a class="header-anchor" href="#实例-128" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np nm = (&#39;raju&#39;,&#39;anil&#39;,&#39;ravi&#39;,&#39;amar&#39;) dv = (&#39;f.y.&#39;, &#39;s.y.&#39;, &#39;s.y.&#39;, &#39;f.y.&#39;) ind = np.lexsort((dv,nm)) print (&#39;调用 lexsort() 函数：&#39;) print (ind) print (&#39;\\n&#39;) print (&#39;使用这个索引来获取排序后的数据：&#39;) print ([nm[i] + &quot;, &quot; + dv[i] for i in ind])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>调用 lexsort() 函数：</span></span>
<span class="line"><span>[3 1 0 2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用这个索引来获取排序后的数据：</span></span>
<span class="line"><span>[&#39;amar, f.y.&#39;, &#39;anil, s.y.&#39;, &#39;raju, f.y.&#39;, &#39;ravi, s.y.&#39;]</span></span></code></pre></div><p>上面传入 np.lexsort 的是一个tuple，排序时首先排 nm，顺序为：amar、anil、raju、ravi 。综上排序结果为 [3 1 0 2]。</p><h3 id="msort、sort-complex、partition、argpartition" tabindex="-1">msort、sort_complex、partition、argpartition <a class="header-anchor" href="#msort、sort-complex、partition、argpartition" aria-label="Permalink to &quot;msort、sort_complex、partition、argpartition&quot;">​</a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>msort(a)</td><td>数组按第一个轴排序，返回排序后的数组副本。np.msort(a) 相等于 np.sort(a, axis=0)。</td></tr><tr><td>sort_complex(a)</td><td>对复数按照先实部后虚部的顺序进行排序。</td></tr><tr><td>partition(a, kth[, axis, kind, order])</td><td>指定一个数，对数组进行分区</td></tr><tr><td>argpartition(a, kth[, axis, kind, order])</td><td>可以通过关键字 kind 指定算法沿着指定轴对数组进行分区</td></tr></tbody></table><p>复数排序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; import numpy as np</span></span>
<span class="line"><span>&gt;&gt;&gt; np.sort_complex([5, 3, 6, 2, 1])</span></span>
<span class="line"><span>array([ 1.+0.j,  2.+0.j,  3.+0.j,  5.+0.j,  6.+0.j])</span></span>
<span class="line"><span>&gt;&gt;&gt;</span></span>
<span class="line"><span>&gt;&gt;&gt; np.sort_complex([1 + 2j, 2 - 1j, 3 - 2j, 3 - 3j, 3 + 5j])</span></span>
<span class="line"><span>array([ 1.+2.j,  2.-1.j,  3.-3.j,  3.-2.j,  3.+5.j])</span></span></code></pre></div><p>partition() 分区排序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; a = np.array([3, 4, 2, 1])</span></span>
<span class="line"><span>&gt;&gt;&gt; np.partition(a, 3)  # 将数组 a 中所有元素（包括重复元素）从小到大排列，3 表示的是排序数组索引为 3 的数字，比该数字小的排在该数字前面，比该数字大的排在该数字的后面</span></span>
<span class="line"><span>array([2, 1, 3, 4])</span></span>
<span class="line"><span>&gt;&gt;&gt;</span></span>
<span class="line"><span>&gt;&gt;&gt; np.partition(a, (1, 3)) # 小于 1 的在前面，大于 3 的在后面，1和3之间的在中间</span></span>
<span class="line"><span>array([1, 2, 3, 4])</span></span></code></pre></div><p>找到数组的第 3 小（index=2）的值和第 2 大（index=-2）的值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; arr = np.array([46, 57, 23, 39, 1, 10, 0, 120])</span></span>
<span class="line"><span>&gt;&gt;&gt; arr[np.argpartition(arr, 2)[2]]</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span>&gt;&gt;&gt; arr[np.argpartition(arr, -2)[-2]]</span></span>
<span class="line"><span>57</span></span></code></pre></div><p>同时找到第 3 和第 4 小的值。注意这里，用 [2,3] 同时将第 3 和第 4 小的排序好，然后可以分别通过下标 [2] 和 [3] 取得。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; arr[np.argpartition(arr, [2,3])[2]]</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span>&gt;&gt;&gt; arr[np.argpartition(arr, [2,3])[3]]</span></span>
<span class="line"><span>23</span></span></code></pre></div><h3 id="numpy-argmax-和-numpy-argmin" tabindex="-1">numpy.argmax() 和 numpy.argmin() <a class="header-anchor" href="#numpy-argmax-和-numpy-argmin" aria-label="Permalink to &quot;numpy.argmax() 和 numpy.argmin()&quot;">​</a></h3><p>numpy.argmax() 和 numpy.argmin()函数分别沿给定轴返回最大和最小元素的索引。</p><h2 id="实例-129" tabindex="-1">实例 <a class="header-anchor" href="#实例-129" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[30,40,70],[80,20,10],[50,90,60]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 argmax() 函数：&#39;) print (np.argmax(a)) print (&#39;\\n&#39;) print (&#39;展开数组：&#39;) print (a.flatten()) print (&#39;\\n&#39;) print (&#39;沿轴 0 的最大值索引：&#39;) maxindex = np.argmax(a, axis = 0) print (maxindex) print (&#39;\\n&#39;) print (&#39;沿轴 1 的最大值索引：&#39;) maxindex = np.argmax(a, axis = 1) print (maxindex) print (&#39;\\n&#39;) print (&#39;调用 argmin() 函数：&#39;) minindex = np.argmin(a) print (minindex) print (&#39;\\n&#39;) print (&#39;展开数组中的最小值：&#39;) print (a.flatten()[minindex]) print (&#39;\\n&#39;) print (&#39;沿轴 0 的最小值索引：&#39;) minindex = np.argmin(a, axis = 0) print (minindex) print (&#39;\\n&#39;) print (&#39;沿轴 1 的最小值索引：&#39;) minindex = np.argmin(a, axis = 1) print (minindex)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[30 40 70]</span></span>
<span class="line"><span> [80 20 10]</span></span>
<span class="line"><span> [50 90 60]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 argmax() 函数：</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>展开数组：</span></span>
<span class="line"><span>[30 40 70 80 20 10 50 90 60]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 的最大值索引：</span></span>
<span class="line"><span>[1 2 0]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 的最大值索引：</span></span>
<span class="line"><span>[2 0 1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 argmin() 函数：</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>展开数组中的最小值：</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 0 的最小值索引：</span></span>
<span class="line"><span>[0 1 1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>沿轴 1 的最小值索引：</span></span>
<span class="line"><span>[0 2 0]</span></span></code></pre></div><h3 id="numpy-nonzero" tabindex="-1">numpy.nonzero() <a class="header-anchor" href="#numpy-nonzero" aria-label="Permalink to &quot;numpy.nonzero()&quot;">​</a></h3><p>numpy.nonzero() 函数返回输入数组中非零元素的索引。</p><h2 id="实例-130" tabindex="-1">实例 <a class="header-anchor" href="#实例-130" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[30,40,0],[0,20,10],[50,0,60]]) print (&#39;我们的数组是：&#39;) print (a) print (&#39;\\n&#39;) print (&#39;调用 nonzero() 函数：&#39;) print (np.nonzero (a))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[30 40  0]</span></span>
<span class="line"><span> [ 0 20 10]</span></span>
<span class="line"><span> [50  0 60]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>调用 nonzero() 函数：</span></span>
<span class="line"><span>(array([0, 0, 1, 1, 2, 2]), array([0, 1, 1, 2, 0, 2]))</span></span></code></pre></div><h3 id="numpy-where" tabindex="-1">numpy.where() <a class="header-anchor" href="#numpy-where" aria-label="Permalink to &quot;numpy.where()&quot;">​</a></h3><p>numpy.where() 函数返回输入数组中满足给定条件的元素的索引。</p><h2 id="实例-131" tabindex="-1">实例 <a class="header-anchor" href="#实例-131" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.arange(9.).reshape(3, 3) print (&#39;我们的数组是：&#39;) print (x) print ( &#39;大于 3 的元素的索引：&#39;) y = np.where(x &gt; 3) print (y) print (&#39;使用这些索引来获取满足条件的元素：&#39;) print (x[y])</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[0. 1. 2.]</span></span>
<span class="line"><span> [3. 4. 5.]</span></span>
<span class="line"><span> [6. 7. 8.]]</span></span>
<span class="line"><span>大于 3 的元素的索引：</span></span>
<span class="line"><span>(array([1, 1, 2, 2, 2]), array([1, 2, 0, 1, 2]))</span></span>
<span class="line"><span>使用这些索引来获取满足条件的元素：</span></span>
<span class="line"><span>[4. 5. 6. 7. 8.]</span></span></code></pre></div><h3 id="numpy-extract" tabindex="-1">numpy.extract() <a class="header-anchor" href="#numpy-extract" aria-label="Permalink to &quot;numpy.extract()&quot;">​</a></h3><p>numpy.extract() 函数根据某个条件从数组中抽取元素，返回满条件的元素。</p><h2 id="实例-132" tabindex="-1">实例 <a class="header-anchor" href="#实例-132" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np x = np.arange(9.).reshape(3, 3) print (&#39;我们的数组是：&#39;) print (x) # 定义条件, 选择偶数元素 condition = np.mod(x,2) == 0 print (&#39;按元素的条件值：&#39;) print (condition) print (&#39;使用条件提取元素：&#39;) print (np.extract(condition, x))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[[0. 1. 2.]</span></span>
<span class="line"><span> [3. 4. 5.]</span></span>
<span class="line"><span> [6. 7. 8.]]</span></span>
<span class="line"><span>按元素的条件值：</span></span>
<span class="line"><span>[[ True False  True]</span></span>
<span class="line"><span> [False  True False]</span></span>
<span class="line"><span> [ True False  True]]</span></span>
<span class="line"><span>使用条件提取元素：</span></span>
<span class="line"><span>[0. 2. 4. 6. 8.]</span></span></code></pre></div><h1 id="numpy-字节交换" tabindex="-1">NumPy 字节交换 <a class="header-anchor" href="#numpy-字节交换" aria-label="Permalink to &quot;NumPy 字节交换&quot;">​</a></h1><p>在几乎所有的机器上，多字节对象都被存储为连续的字节序列。字节顺序，是跨越多字节的程序对象的存储规则。</p><ul><li>**大端模式：**指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。</li><li>**小端模式：**指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低。</li></ul><p>例如在 C 语言中，一个类型为 int 的变量 x 地址为 0x100，那么其对应地址表达式&amp;x的值为 0x100。且x的四个字节将被存储在存储器的 0x100, 0x101, 0x102, 0x103位置。</p><p><img src="`+l+`" alt="img"></p><h3 id="numpy-ndarray-byteswap" tabindex="-1">numpy.ndarray.byteswap() <a class="header-anchor" href="#numpy-ndarray-byteswap" aria-label="Permalink to &quot;numpy.ndarray.byteswap()&quot;">​</a></h3><p>numpy.ndarray.byteswap() 函数将 ndarray 中每个元素中的字节进行大小端转换。</p><h2 id="实例-133" tabindex="-1">实例 <a class="header-anchor" href="#实例-133" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([1, 256, 8755], dtype = np.int16) print (&#39;我们的数组是：&#39;) print (a) print (&#39;以十六进制表示内存中的数据：&#39;) print (map(hex,a)) # byteswap() 函数通过传入 true 来原地交换 print (&#39;调用 byteswap() 函数：&#39;) print (a.byteswap(True)) print (&#39;十六进制形式：&#39;) print (map(hex,a)) # 我们可以看到字节已经交换了</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[   1  256 8755]</span></span>
<span class="line"><span>以十六进制表示内存中的数据：</span></span>
<span class="line"><span>&lt;map object at 0x104acb400&gt;</span></span>
<span class="line"><span>调用 byteswap() 函数：</span></span>
<span class="line"><span>[  256     1 13090]</span></span>
<span class="line"><span>十六进制形式：</span></span>
<span class="line"><span>&lt;map object at 0x104acb3c8&gt;</span></span></code></pre></div><h1 id="numpy-副本和视图" tabindex="-1">NumPy 副本和视图 <a class="header-anchor" href="#numpy-副本和视图" aria-label="Permalink to &quot;NumPy 副本和视图&quot;">​</a></h1><p>副本是一个数据的完整的拷贝，如果我们对副本进行修改，它不会影响到原始数据，物理内存不在同一位置。</p><p>视图是数据的一个别称或引用，通过该别称或引用亦便可访问、操作原有数据，但原有数据不会产生拷贝。如果我们对视图进行修改，它会影响到原始数据，物理内存在同一位置。</p><p><strong>视图一般发生在：</strong></p><ul><li>1、numpy 的切片操作返回原数据的视图。</li><li>2、调用 ndarray 的 view() 函数产生一个视图。</li></ul><p><strong>副本一般发生在：</strong></p><ul><li>Python 序列的切片操作，调用deepCopy()函数。</li><li>调用 ndarray 的 copy() 函数产生一个副本。</li></ul><h3 id="无复制" tabindex="-1">无复制 <a class="header-anchor" href="#无复制" aria-label="Permalink to &quot;无复制&quot;">​</a></h3><p>简单的赋值不会创建数组对象的副本。 相反，它使用原始数组的相同id()来访问它。 id()返回 Python 对象的通用标识符，类似于 C 中的指针。</p><p>此外，一个数组的任何变化都反映在另一个数组上。 例如，一个数组的形状改变也会改变另一个数组的形状。</p><h2 id="实例-134" tabindex="-1">实例 <a class="header-anchor" href="#实例-134" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.arange(6) print (&#39;我们的数组是：&#39;) print (a) print (&#39;调用 id() 函数：&#39;) print (id(a)) print (&#39;a 赋值给 b：&#39;) b = a print (b) print (&#39;b 拥有相同 id()：&#39;) print (id(b)) print (&#39;修改 b 的形状：&#39;) b.shape = 3,2 print (b) print (&#39;a 的形状也修改了：&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组是：</span></span>
<span class="line"><span>[0 1 2 3 4 5]</span></span>
<span class="line"><span>调用 id() 函数：</span></span>
<span class="line"><span>4349302224</span></span>
<span class="line"><span>a 赋值给 b：</span></span>
<span class="line"><span>[0 1 2 3 4 5]</span></span>
<span class="line"><span>b 拥有相同 id()：</span></span>
<span class="line"><span>4349302224</span></span>
<span class="line"><span>修改 b 的形状：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span>
<span class="line"><span>a 的形状也修改了：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span></code></pre></div><h3 id="视图或浅拷贝" tabindex="-1">视图或浅拷贝 <a class="header-anchor" href="#视图或浅拷贝" aria-label="Permalink to &quot;视图或浅拷贝&quot;">​</a></h3><p>ndarray.view() 方会创建一个新的数组对象，该方法创建的新数组的维数变化不会改变原始数据的维数。</p><h2 id="实例-135" tabindex="-1">实例 <a class="header-anchor" href="#实例-135" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np # 最开始 a 是个 3X2 的数组 a = np.arange(6).reshape(3,2) print (&#39;数组 a：&#39;) print (a) print (&#39;创建 a 的视图：&#39;) b = a.view() print (b) print (&#39;两个数组的 id() 不同：&#39;) print (&#39;a 的 id()：&#39;) print (id(a)) print (&#39;b 的 id()：&#39; ) print (id(b)) # 修改 b 的形状，并不会修改 a b.shape = 2,3 print (&#39;b 的形状：&#39;) print (b) print (&#39;a 的形状：&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数组 a：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span>
<span class="line"><span>创建 a 的视图：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span>
<span class="line"><span>两个数组的 id() 不同：</span></span>
<span class="line"><span>a 的 id()：</span></span>
<span class="line"><span>4314786992</span></span>
<span class="line"><span>b 的 id()：</span></span>
<span class="line"><span>4315171296</span></span>
<span class="line"><span>b 的形状：</span></span>
<span class="line"><span>[[0 1 2]</span></span>
<span class="line"><span> [3 4 5]]</span></span>
<span class="line"><span>a 的形状：</span></span>
<span class="line"><span>[[0 1]</span></span>
<span class="line"><span> [2 3]</span></span>
<span class="line"><span> [4 5]]</span></span></code></pre></div><p>使用切片创建视图修改数据会影响到原始数组：</p><h2 id="实例-136" tabindex="-1">实例 <a class="header-anchor" href="#实例-136" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np arr = np.arange(12) print (&#39;我们的数组：&#39;) print (arr) print (&#39;创建切片：&#39;) a=arr[3:] b=arr[3:] a[1]=123 b[2]=234 print(arr) print(id(a),id(b),id(arr[3:]))</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我们的数组：</span></span>
<span class="line"><span>[ 0  1  2  3  4  5  6  7  8  9 10 11]</span></span>
<span class="line"><span>创建切片：</span></span>
<span class="line"><span>[  0   1   2   3 123 234   6   7   8   9  10  11]</span></span>
<span class="line"><span>4545878416 4545878496 4545878576</span></span></code></pre></div><p>变量 a,b 都是 arr 的一部分视图，对视图的修改会直接反映到原数据中。但是我们观察 a,b 的 id，他们是不同的，也就是说，视图虽然指向原数据，但是他们和赋值引用还是有区别的。</p><h3 id="副本或深拷贝" tabindex="-1">副本或深拷贝 <a class="header-anchor" href="#副本或深拷贝" aria-label="Permalink to &quot;副本或深拷贝&quot;">​</a></h3><p>ndarray.copy() 函数创建一个副本。 对副本数据进行修改，不会影响到原始数据，它们物理内存不在同一位置。</p><h2 id="实例-137" tabindex="-1">实例 <a class="header-anchor" href="#实例-137" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>import numpy as np a = np.array([[10,10], [2,3], [4,5]]) print (&#39;数组 a：&#39;) print (a) print (&#39;创建 a 的深层副本：&#39;) b = a.copy() print (&#39;数组 b：&#39;) print (b) # b 与 a 不共享任何内容 print (&#39;我们能够写入 b 来写入 a 吗？&#39;) print (b is a) print (&#39;修改 b 的内容：&#39;) b[0,0] = 100 print (&#39;修改后的数组 b：&#39;) print (b) print (&#39;a 保持不变：&#39;) print (a)</p><p>输出结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数组 a：</span></span>
<span class="line"><span>[[10 10]</span></span>
<span class="line"><span> [ 2  3]</span></span>
<span class="line"><span> [ 4  5]]</span></span>
<span class="line"><span>创建 a 的深层副本：</span></span>
<span class="line"><span>数组 b：</span></span>
<span class="line"><span>[[10 10]</span></span>
<span class="line"><span> [ 2  3]</span></span>
<span class="line"><span> [ 4  5]]</span></span>
<span class="line"><span>我们能够写入 b 来写入 a 吗？</span></span>
<span class="line"><span>False</span></span>
<span class="line"><span>修改 b 的内容：</span></span>
<span class="line"><span>修改后的数组 b：</span></span>
<span class="line"><span>[[100  10]</span></span>
<span class="line"><span> [  2   3]</span></span>
<span class="line"><span> [  4   5]]</span></span>
<span class="line"><span>a 保持不变：</span></span>
<span class="line"><span>[[10 10]</span></span>
<span class="line"><span> [ 2  3]</span></span>
<span class="line"><span> [ 4  5]]</span></span></code></pre></div>`,1143),d=[o];function c(h,u,m,b,y,g){return s(),n("div",null,d)}const x=a(r,[["render",c]]);export{k as __pageData,x as default};
