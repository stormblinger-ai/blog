import{_ as a,c as e,o as t,a5 as o}from"./chunks/framework.BthLuVtL.js";const q=JSON.parse('{"title":"Python 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"Python/5.md","filePath":"Python/5.md"}'),l={name:"Python/5.md"},i=o('<h1 id="python-数据类型" tabindex="-1">Python 数据类型 <a class="header-anchor" href="#python-数据类型" aria-label="Permalink to &quot;Python 数据类型&quot;">​</a></h1><p>更新：2022-07-28 21:41</p><p>数据类型是数据项的分类或归类。Python 支持以下内置数据类型。</p><h2 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h2><ul><li>int(整数型):正整数或负整数(不带小数部分)，例如-10，10，456，4654654。</li><li>float(浮点型):任何用浮点数表示的实数，其中小数部分用十进制符号或科学符号表示，例如 1.23，3.4556789e2.</li><li>complex(复数):实部和虚部表示为<code>x + 2y</code>的数,如 2.14j、2.0 + 2.3j 等。</li><li>bool(布尔型):True和False</li></ul><h2 id="none" tabindex="-1">None <a class="header-anchor" href="#none" aria-label="Permalink to &quot;None&quot;">​</a></h2><h2 id="序列类型" tabindex="-1">序列类型 <a class="header-anchor" href="#序列类型" aria-label="Permalink to &quot;序列类型&quot;">​</a></h2><p>序列是相似或不同数据类型的有序集合。Python 具有以下内置序列数据类型:</p><ul><li>String(字符串):字符串值是放在单引号、双引号或三引号中的一个或多个字符的集合。</li><li>List(列表):List 对象是放在方括号中的一个或多个数据项的有序集合，列表可以包含不同类型的数据。。</li><li>Tuple(元组):Tuple 对象是一个或多个数据项的有序集合，不一定是同一类型，放在括号中。</li></ul><h2 id="映射类型" tabindex="-1">映射类型 <a class="header-anchor" href="#映射类型" aria-label="Permalink to &quot;映射类型&quot;">​</a></h2><p>dict :字典<code>Dict()</code>对象是以键:值对形式的无序数据集合。这些对的集合包含在花括号中。 例如:<code>{1:&quot;Steve&quot;, 2:&quot;Bill&quot;, 3:&quot;Ram&quot;, 4: &quot;Farha&quot;}</code></p><h2 id="集合类型" tabindex="-1">集合类型 <a class="header-anchor" href="#集合类型" aria-label="Permalink to &quot;集合类型&quot;">​</a></h2><ul><li>set:集合是不同的可散列对象的可变的、无序的集合。该集合是数学中集合的 Python 实现。集合对象有合适的方法来执行数学集合运算，如并集、交集、差集等。</li><li>frozenset : Frozenset 是set的不可变版本，其元素是从其他 iterables 添加的。</li></ul><h3 id="可变和不可变类型" tabindex="-1">可变和不可变类型 <a class="header-anchor" href="#可变和不可变类型" aria-label="Permalink to &quot;可变和不可变类型&quot;">​</a></h3><p>上述类型的数据对象存储在计算机的内存中进行处理。其中一些值可以在处理过程中修改，但其他值的内容一旦在内存中创建就不能更改。</p><p>数字、字符串、元组是不可变的，这意味着它们的内容在创建后不能更改。</p><p>另一方面，可以修改列表或词典对象中的项目。可以在列表或字典中添加、删除、插入和重新排列项目。因此，它们是可变对象。</p>',17),n=[i];function r(h,s,c,d,u,p){return t(),e("div",null,n)}const P=a(l,[["render",r]]);export{q as __pageData,P as default};
