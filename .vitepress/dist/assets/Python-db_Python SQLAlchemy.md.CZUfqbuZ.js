import{_ as e,c as a,o as s,a5 as t}from"./chunks/framework.BthLuVtL.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python-db/Python SQLAlchemy.md","filePath":"Python-db/Python SQLAlchemy.md"}'),i={name:"Python-db/Python SQLAlchemy.md"},l=t('<h2 id="_1-简介" tabindex="-1">1 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1 简介&quot;">​</a></h2><p>SQLAlchemy 是一个使用 Python 实现的 ORM 框架，它的设计理念是：SQL 数据库的量级和性能比对象集合重要，对象集合的抽象比表和行重要；它采用了类似于 Java 里 Hibernate 的数据映射模型；它的目标是提供能兼容众多数据库（如：SQLite、MySQL、Postgres、Oracle、MS-SQL、SQLServer 和 Firebird）的企业级持久性模型。</p><p>上面提到了 ORM，那 ORM 是什么？ORM 全称 Object Relational Mapping，中文译为对象关系映射，简单的说就是在数据库与业务实体对象之间建立了一种对应关系，我们可以用操作实体对象的方式来完成数据库的操作，ORM 封装了数据库操作，我们无需关心底层数据库是什么，也不用关心 SQL 语言，只需与数据对象交互即可。</p><h2 id="_2-使用" tabindex="-1">2 使用 <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2 使用&quot;">​</a></h2><p>SQLAlchemy 可以支持多种数据库，本文我们以 SQLite 例，其他数据库也会做一些简单介绍。</p><h3 id="_2-1-安装" tabindex="-1">2.1 安装 <a class="header-anchor" href="#_2-1-安装" aria-label="Permalink to &quot;2.1 安装&quot;">​</a></h3><p>在使用 SQLAlchemy 之前，我们首先要进行安装，使用 pip install sqlalchemy 即可。安装好后看一下版本，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt;&gt;&gt; import sqlalchemy</span></span></code></pre></div><h3 id="_2-2-创建连接" tabindex="-1">2.2 创建连接 <a class="header-anchor" href="#_2-2-创建连接" aria-label="Permalink to &quot;2.2 创建连接&quot;">​</a></h3><p>具体操作之前先看一下 SQLAlchemy Engine（引擎），如图所示：</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>SQLAlchemy 通过 Engine 来驱动，从图中可以看出 Engine 内维护了一个连接池（Pool）和方言（Dialect），Pool 就是用来存放连接的，Dialect 是用来判断要连接的是哪种数据库，我们创建连接要先创建 Engine，然后再通过 Engine 来创建连接。</p><h4 id="_2-2-1-sqlite" tabindex="-1">2.2.1 SQLite <a class="header-anchor" href="#_2-2-1-sqlite" aria-label="Permalink to &quot;2.2.1 SQLite&quot;">​</a></h4><p>我们先来看一下如何创建 Engine，几种创建方式如下所示：</p><p>相对路径方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>engine = create_engine(&#39;sqlite:///foo.db&#39;)</span></span></code></pre></div><p>绝对路径方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Unix/Mac</span></span></code></pre></div><p>创建内存数据库</p><p>SQLite 可以创建内存数据库，其他数据库不可以。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>engine = create_engine(&#39;sqlite://&#39;)</span></span></code></pre></div><p>以相对路径方式为例，看一下实现示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><p>echo=True 会将执行语句打印出来，默认为 False；数据库（foo.db）不存在会自动创建。</p><h4 id="_2-2-2-其他数据库" tabindex="-1">2.2.2 其他数据库 <a class="header-anchor" href="#_2-2-2-其他数据库" aria-label="Permalink to &quot;2.2.2 其他数据库&quot;">​</a></h4><h5 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h5><p>在使用之前要进行第三库的安装，使用 pip install mysqlclient 和 pip install pymysql 即可。</p><p>创建 Engine 方式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># default</span></span></code></pre></div><p>使用示例如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><p>参数说明如下所示：</p><ul><li><p>echo：值为 True 将执行语句打印出来，默认为 False。</p></li><li><p>pool_size：连接池的大小，默认为 5，0 表示连接数无限制。</p></li><li><p>pool_recycle：设置了 pool_recycle 后，SQLAlchemy 会在指定时间内回收连接，单位为秒。</p></li></ul><h5 id="oracle" tabindex="-1">Oracle <a class="header-anchor" href="#oracle" aria-label="Permalink to &quot;Oracle&quot;">​</a></h5><p>创建 Engine 方式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>engine = create_engine(&#39;oracle://scott:tiger@127.0.0.1:1521/sidname&#39;)</span></span></code></pre></div><h5 id="postgresql" tabindex="-1">PostgreSQL <a class="header-anchor" href="#postgresql" aria-label="Permalink to &quot;PostgreSQL&quot;">​</a></h5><p>创建 Engine 方式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># default</span></span></code></pre></div><h5 id="sql-server" tabindex="-1">SQL Server <a class="header-anchor" href="#sql-server" aria-label="Permalink to &quot;SQL Server&quot;">​</a></h5><p>创建 Engine 方式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># pyodbc</span></span></code></pre></div><h3 id="_2-3-创建表" tabindex="-1">2.3 创建表 <a class="header-anchor" href="#_2-3-创建表" aria-label="Permalink to &quot;2.3 创建表&quot;">​</a></h3><p>表的创建通过映射类的方式实现，首先创建映射基类，后面的类需要继承它，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy.ext.declarative import declarative_base</span></span></code></pre></div><p>创建具体映射类，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><p>执行完成后表就自动为我们创建好了，我们通过 SQLiteStudio 查看一下，结果如图所示：</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><h3 id="_2-4-建立会话" tabindex="-1">2.4 建立会话 <a class="header-anchor" href="#_2-4-建立会话" aria-label="Permalink to &quot;2.4 建立会话&quot;">​</a></h3><p>具体的操作需要使用 session，创建方式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><h3 id="_2-5-基本操作" tabindex="-1">2.5 基本操作 <a class="header-anchor" href="#_2-5-基本操作" aria-label="Permalink to &quot;2.5 基本操作&quot;">​</a></h3><h4 id="_2-5-1-新增" tabindex="-1">2.5.1 新增 <a class="header-anchor" href="#_2-5-1-新增" aria-label="Permalink to &quot;2.5.1 新增&quot;">​</a></h4><p>我们先新增一条数据，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><h4 id="_2-5-2-查询" tabindex="-1">2.5.2 查询 <a class="header-anchor" href="#_2-5-2-查询" aria-label="Permalink to &quot;2.5.2 查询&quot;">​</a></h4><p>查询操作如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><h4 id="_2-5-3-修改" tabindex="-1">2.5.3 修改 <a class="header-anchor" href="#_2-5-3-修改" aria-label="Permalink to &quot;2.5.3 修改&quot;">​</a></h4><p>我们将 id=1 这条数据的 name 修改一下，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><h4 id="_2-5-4-删除" tabindex="-1">2.5.4 删除 <a class="header-anchor" href="#_2-5-4-删除" aria-label="Permalink to &quot;2.5.4 删除&quot;">​</a></h4><p>我们将 id=1 这条数据删除，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from sqlalchemy import create_engine</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文介绍了 SQLAlchemy 的基本概念和使用，对 Python 工程师使用 SQLAlchemy 提供了支撑。</p><h2 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h2><p><a href="https://docs.sqlalchemy.org/en/13/orm/tutorial.html" target="_blank" rel="noreferrer">https://docs.sqlalchemy.org/en/13/orm/tutorial.html</a></p><blockquote><p>示例代码：Python-100-days-day086</p></blockquote>',70),n=[l];function p(o,r,h,c,d,g){return s(),a("div",null,n)}const b=e(i,[["render",p]]);export{m as __pageData,b as default};
