import{_ as s,c as a,o as n,a5 as i}from"./chunks/framework.BthLuVtL.js";const g=JSON.parse('{"title":"Python 语法","description":"","frontmatter":{},"headers":[],"relativePath":"Python/3.md","filePath":"Python/3.md"}'),p={name:"Python/3.md"},t=i(`<h1 id="python-语法" tabindex="-1">Python 语法 <a class="header-anchor" href="#python-语法" aria-label="Permalink to &quot;Python 语法&quot;">​</a></h1><p>更新：2022-07-25 02:40</p><h2 id="python语句" tabindex="-1">Python语句 <a class="header-anchor" href="#python语句" aria-label="Permalink to &quot;Python语句&quot;">​</a></h2><p>Python 语句以 回车 结束，即Python 脚本中的每一行都是一条语句。下面的 Python 脚本三行代表三条不同的语句。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UserName:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fke6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PassWord:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fke6.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用反斜杠 \\ 来连接多行的语句，如下所示。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    True</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>请注意，反斜杠字符跨越一个逻辑行中的单个语句和多个物理行，而不是一个逻辑行中的两个不同语句。</p><p>正确示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>错误示例:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果要在同一行写入多个语句，需要使用分号;来分割。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(&#39;id: &#39;, 1);print(&#39;UserName:&#39;, &#39;fke6&#39;);print(&#39;PassWord:&#39;, &#39;fke6.com&#39;)</span></span></code></pre></div><p>圆括号<code>()</code>、方括号<code>[ ]</code>或大括号<code>{ }</code>中的表达式可以分布在多行上，无需使用反斜杠。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list = [1, 2, 3, 4</span></span>
<span class="line"><span>        5, 6, 7, 8,</span></span>
<span class="line"><span>        9, 10, 11, 12]</span></span></code></pre></div><h2 id="python-中的缩进" tabindex="-1">Python 中的缩进 <a class="header-anchor" href="#python-中的缩进" aria-label="Permalink to &quot;Python 中的缩进&quot;">​</a></h2><h3 id="缩进规则" tabindex="-1">缩进规则 <a class="header-anchor" href="#缩进规则" aria-label="Permalink to &quot;缩进规则&quot;">​</a></h3><ul><li>使用冒号 : 开始一个块，然后按回车键。</li><li>每个块中的所有行必须使用相同的缩进，要么是空格，要么是制表符。</li><li>Python 推荐四个空格作为缩进，让代码更易读。不要在同一个块中混合空格和制表符。</li><li>一个块可以有下一级缩进的内部块。</li></ul><p>下面的例子演示了如果 elif 阻塞了:</p><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if 10 &gt; 5:  # 第一个块开始</span></span>
<span class="line"><span>    print(&quot;10比5大&quot;)</span></span>
<span class="line"><span>    print(&quot;开始检测20和10&quot;)</span></span>
<span class="line"><span>    if 20 &gt; 10: # 内部块开始(规则第4条)</span></span>
<span class="line"><span>        print(&quot;20比10大&quot;)</span></span>
<span class="line"><span>else: # 第二个块</span></span>
<span class="line"><span>    print(&quot;10比5小&quot;)</span></span>
<span class="line"><span>    print(&quot;因为条件错误，所以此处不会打印出来&quot;)</span></span></code></pre></div><p>下面的函数包含一个带有两个语句的块。</p><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def SayHello(name):</span></span>
<span class="line"><span>    print(&quot;Hello &quot;, name)</span></span>
<span class="line"><span>    print(&quot;Welcome to fke6.com&quot;)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>SayHello(&quot;fke6user&quot;)</span></span></code></pre></div><h2 id="python-中的注释" tabindex="-1">Python 中的注释 <a class="header-anchor" href="#python-中的注释" aria-label="Permalink to &quot;Python 中的注释&quot;">​</a></h2><p>在 Python 脚本中，井号 # 表示注释行的开始，自此开始到一行结尾皆有效。</p><p>Example: 单行注释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(&quot;Hello World&quot;)</span></span>
<span class="line"><span>print(&quot;Welcome to Python Tutorial&quot;) #这里为注释，注释部分不会显示，也不会影响前面的语句执行。</span></span></code></pre></div><p>此外，一对三个单引号包围的中间的部分，也会视为注释部分。</p><p>Example: 多行注释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;&#39;&#39;</span></span>
<span class="line"><span>www.fke6.com</span></span>
<span class="line"><span>这里是多行注释部分</span></span>
<span class="line"><span>Welcome to fke6</span></span>
<span class="line"><span>&#39;&#39;&#39;</span></span></code></pre></div><h2 id="python-命名规范" tabindex="-1">Python 命名规范 <a class="header-anchor" href="#python-命名规范" aria-label="Permalink to &quot;Python 命名规范&quot;">​</a></h2><p>Python 程序可以包含变量、函数、类、模块、包等。标识符是赋予这些编程元素的名称。标识符应以字母（小写或大写）或下划线 (_) 开头。之后，可以使用多个字母（az 或 AZ）、数字（0-9）或下划线来组成标识符。不允许使用其他字符。（标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名）</p><ul><li>Python 中的标识符区分大小写，即 <code>age</code>和<code>Age</code>在Python中表示两个不同的变量。</li><li>类名应该使用如 TitleCase 规范。它应该以大写字母开头，例如<code>MyClass</code>、<code>Employee</code>、<code>Person</code>。</li><li>函数名应该是小写的。多个单词应该用下划线隔开，例如<code>add(num)</code>、<code>calculate_tax(amount)</code>。</li><li>函数中的变量名应该是小写的，例如:<code>x</code>、<code>num</code>、<code>salary</code>。</li><li>模块和包名应该是小写的，例如<code>mymodule</code>、<code>tax_calculation</code>。使用下划线来提高可读性。</li><li>常量变量名应该大写，例如<code>RATE</code>、<code>TAX_RATE</code>。</li><li>命名类的实例属性时使用一个或两个下划线字符。</li><li>Python 本身使用了两个前导下划线和尾随下划线用于特殊用途，例如 <strong>add</strong>、<strong>init</strong> 等。</li></ul><h2 id="python-输出" tabindex="-1">Python 输出 <a class="header-anchor" href="#python-输出" aria-label="Permalink to &quot;Python 输出&quot;">​</a></h2><p>print() 作为 Python 中的输出语句。</p><p>需要输出多个值时，可以通过逗号分隔。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>url = &quot;fke6.com&quot;</span></span>
<span class="line"><span>print(url)</span></span>
<span class="line"><span># 输出: fke6.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sitename = &quot;python教程&quot;</span></span>
<span class="line"><span>print(url, sitename)</span></span>
<span class="line"><span># 输出: fke6.com python教程</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;网址:&quot;, url, &quot;站点名:&quot;, sitename)</span></span>
<span class="line"><span># 输出: 网址: fke6.com 站点名: python教程</span></span></code></pre></div><p>默认情况下，单个空格&#39; &#39;充当值之间的分隔符。但是，可以通过提供sep参数来使用任何其他字符。</p>`,40),e=[t];function l(h,o,d,c,k,r){return n(),a("div",null,e)}const u=s(p,[["render",l]]);export{g as __pageData,u as default};
